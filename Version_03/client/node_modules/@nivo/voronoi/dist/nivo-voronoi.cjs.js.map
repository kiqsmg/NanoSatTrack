{"version":3,"file":"nivo-voronoi.cjs.js","sources":["../src/props.ts","../src/computeMesh.ts","../src/hooks.ts","../src/Voronoi.tsx","../src/Mesh.tsx","../src/ResponsiveVoronoi.tsx","../src/meshCanvas.ts"],"sourcesContent":["import { VoronoiDomain, VoronoiLayer } from './types'\n\nexport const defaultVoronoiProps = {\n    xDomain: [0, 1] as VoronoiDomain,\n    yDomain: [0, 1] as VoronoiDomain,\n    layers: ['links', 'cells', 'points', 'bounds'] as VoronoiLayer[],\n    enableLinks: false,\n    linkLineWidth: 1,\n    linkLineColor: '#bbbbbb',\n    enableCells: true,\n    cellLineWidth: 2,\n    cellLineColor: '#000000',\n    enablePoints: true,\n    pointSize: 4,\n    pointColor: '#666666',\n    role: 'img',\n}\n","import { Delaunay } from 'd3-delaunay'\n\ntype NumberPropertyNames<T> = {\n    [K in keyof T]: T[K] extends number ? K : never\n}[keyof T]\n\nexport type XYAccessor<Datum> = NumberPropertyNames<Datum> | ((datum: Datum) => number)\n\nconst getAccessor = <Datum>(directive: XYAccessor<Datum>) =>\n    typeof directive === 'function' ? directive : (datum: Datum) => datum[directive]\n\n/**\n * The delaunay generator requires an array\n * where each point is defined as an array\n * of 2 elements: [x: number, y: number].\n *\n * Points represent the raw input data\n * and x/y represent accessors to x & y.\n */\nexport const computeMeshPoints = <Datum>({\n    points,\n    x = 'x' as NumberPropertyNames<Datum>,\n    y = 'y' as NumberPropertyNames<Datum>,\n}: {\n    points: Datum[]\n    x?: XYAccessor<Datum>\n    y?: XYAccessor<Datum>\n}): [number, number][] => {\n    const getX = getAccessor<Datum>(x)\n    const getY = getAccessor<Datum>(y)\n\n    return points.map(point => [getX(point) as number, getY(point) as number])\n}\n\nexport const computeMesh = ({\n    points,\n    width,\n    height,\n    debug,\n}: {\n    points: [number, number][]\n    width: number\n    height: number\n    debug?: boolean\n}) => {\n    const delaunay = Delaunay.from(points)\n    const voronoi = debug ? delaunay.voronoi([0, 0, width, height]) : undefined\n\n    return { delaunay, voronoi }\n}\n","import { useMemo } from 'react'\nimport { scaleLinear } from 'd3-scale'\nimport { Delaunay } from 'd3-delaunay'\nimport { computeMeshPoints, computeMesh, XYAccessor } from './computeMesh'\nimport { VoronoiCommonProps, VoronoiDatum, VoronoiCustomLayerProps } from './types'\n\nexport const useVoronoiMesh = <Datum>({\n    points,\n    x,\n    y,\n    width,\n    height,\n    debug,\n}: {\n    points: Datum[]\n    x?: XYAccessor<Datum>\n    y?: XYAccessor<Datum>\n    width: number\n    height: number\n    debug?: boolean\n}) => {\n    const points2d = useMemo(() => computeMeshPoints<Datum>({ points, x, y }), [points, x, y])\n\n    return useMemo(\n        () => computeMesh({ points: points2d, width, height, debug }),\n        [points2d, width, height, debug]\n    )\n}\n\nexport const useVoronoi = ({\n    data,\n    width,\n    height,\n    xDomain,\n    yDomain,\n}: {\n    data: VoronoiDatum[]\n    width: number\n    height: number\n    xDomain: VoronoiCommonProps['xDomain']\n    yDomain: VoronoiCommonProps['yDomain']\n}) => {\n    const xScale = useMemo(() => scaleLinear().domain(xDomain).range([0, width]), [xDomain, width])\n    const yScale = useMemo(\n        () => scaleLinear().domain(yDomain).range([0, height]),\n        [yDomain, height]\n    )\n\n    const points = useMemo(\n        () =>\n            data.map(d => ({\n                x: xScale(d.x),\n                y: yScale(d.y),\n                data: d,\n            })),\n        [data, xScale, yScale]\n    )\n\n    return useMemo(() => {\n        const delaunay = Delaunay.from(points.map(p => [p.x, p.y]))\n        const voronoi = delaunay.voronoi([0, 0, width, height])\n\n        return {\n            points,\n            delaunay,\n            voronoi,\n        }\n    }, [points, width, height])\n}\n\n/**\n * Memoize the context to pass to custom layers.\n */\nexport const useVoronoiLayerContext = ({\n    points,\n    delaunay,\n    voronoi,\n}: VoronoiCustomLayerProps): VoronoiCustomLayerProps =>\n    useMemo(\n        () => ({\n            points,\n            delaunay,\n            voronoi,\n        }),\n        [points, delaunay, voronoi]\n    )\n","import { createElement, Fragment, ReactNode } from 'react'\nimport { Container, SvgWrapper, useDimensions } from '@nivo/core'\nimport { VoronoiSvgProps, VoronoiLayerId } from './types'\nimport { defaultVoronoiProps } from './props'\nimport { useVoronoi, useVoronoiLayerContext } from './hooks'\n\ntype InnerVoronoiProps = Partial<Omit<VoronoiSvgProps, 'data' | 'width' | 'height'>> &\n    Pick<VoronoiSvgProps, 'data' | 'width' | 'height'>\n\nconst InnerVoronoi = ({\n    data,\n    width,\n    height,\n    margin: partialMargin,\n    layers = defaultVoronoiProps.layers,\n    xDomain = defaultVoronoiProps.xDomain,\n    yDomain = defaultVoronoiProps.yDomain,\n    enableLinks = defaultVoronoiProps.enableLinks,\n    linkLineWidth = defaultVoronoiProps.linkLineWidth,\n    linkLineColor = defaultVoronoiProps.linkLineColor,\n    enableCells = defaultVoronoiProps.enableCells,\n    cellLineWidth = defaultVoronoiProps.cellLineWidth,\n    cellLineColor = defaultVoronoiProps.cellLineColor,\n    enablePoints = defaultVoronoiProps.enableCells,\n    pointSize = defaultVoronoiProps.pointSize,\n    pointColor = defaultVoronoiProps.pointColor,\n    role = defaultVoronoiProps.role,\n}: InnerVoronoiProps) => {\n    const { outerWidth, outerHeight, margin, innerWidth, innerHeight } = useDimensions(\n        width,\n        height,\n        partialMargin\n    )\n\n    const { points, delaunay, voronoi } = useVoronoi({\n        data,\n        width: innerWidth,\n        height: innerHeight,\n        xDomain,\n        yDomain,\n    })\n\n    const layerById: Record<VoronoiLayerId, ReactNode> = {\n        links: null,\n        cells: null,\n        points: null,\n        bounds: null,\n    }\n\n    if (enableLinks && layers.includes('links')) {\n        layerById.links = (\n            <path\n                key=\"links\"\n                stroke={linkLineColor}\n                strokeWidth={linkLineWidth}\n                fill=\"none\"\n                d={delaunay.render()}\n            />\n        )\n    }\n\n    if (enableCells && layers.includes('cells')) {\n        layerById.cells = (\n            <path\n                key=\"cells\"\n                d={voronoi.render()}\n                fill=\"none\"\n                stroke={cellLineColor}\n                strokeWidth={cellLineWidth}\n            />\n        )\n    }\n\n    if (enablePoints && layers.includes('points')) {\n        layerById.points = (\n            <path\n                key=\"points\"\n                stroke=\"none\"\n                fill={pointColor}\n                d={delaunay.renderPoints(undefined, pointSize / 2)}\n            />\n        )\n    }\n\n    if (layers.includes('bounds')) {\n        layerById.bounds = (\n            <path\n                key=\"bounds\"\n                fill=\"none\"\n                stroke={cellLineColor}\n                strokeWidth={cellLineWidth}\n                d={voronoi.renderBounds()}\n            />\n        )\n    }\n\n    const layerContext = useVoronoiLayerContext({\n        points,\n        delaunay,\n        voronoi,\n    })\n\n    return (\n        <SvgWrapper width={outerWidth} height={outerHeight} margin={margin} role={role}>\n            {layers.map((layer, i) => {\n                if (layerById[layer as VoronoiLayerId] !== undefined) {\n                    return layerById[layer as VoronoiLayerId]\n                }\n\n                if (typeof layer === 'function') {\n                    return <Fragment key={i}>{createElement(layer, layerContext)}</Fragment>\n                }\n\n                return null\n            })}\n        </SvgWrapper>\n    )\n}\n\nexport const Voronoi = ({\n    theme,\n    ...otherProps\n}: Partial<Omit<VoronoiSvgProps, 'data' | 'width' | 'height'>> &\n    Pick<VoronoiSvgProps, 'data' | 'width' | 'height'>) => (\n    <Container isInteractive={false} animate={false} theme={theme}>\n        <InnerVoronoi {...otherProps} />\n    </Container>\n)\n","import { useRef, useState, useCallback, useMemo } from 'react'\nimport * as React from 'react'\nimport { getRelativeCursor } from '@nivo/core'\nimport { useVoronoiMesh } from './hooks'\nimport { XYAccessor } from './computeMesh'\n\ntype MouseHandler<Datum> = (datum: Datum, event: React.MouseEvent) => void\n\ninterface MeshProps<Datum> {\n    nodes: Datum[]\n    width: number\n    height: number\n    x?: XYAccessor<Datum>\n    y?: XYAccessor<Datum>\n    onMouseEnter?: MouseHandler<Datum>\n    onMouseMove?: MouseHandler<Datum>\n    onMouseLeave?: MouseHandler<Datum>\n    onClick?: MouseHandler<Datum>\n    debug?: boolean\n}\n\nexport const Mesh = <Datum,>({\n    nodes,\n    width,\n    height,\n    x,\n    y,\n    onMouseEnter,\n    onMouseMove,\n    onMouseLeave,\n    onClick,\n    debug,\n}: MeshProps<Datum>) => {\n    const elementRef = useRef<SVGGElement>(null)\n    const [currentIndex, setCurrentIndex] = useState<number | null>(null)\n\n    const { delaunay, voronoi } = useVoronoiMesh({\n        points: nodes,\n        x,\n        y,\n        width,\n        height,\n        debug,\n    })\n\n    const voronoiPath = useMemo(() => {\n        if (debug && voronoi) {\n            return voronoi.render()\n        }\n\n        return undefined\n    }, [debug, voronoi])\n\n    const getIndexAndNodeFromEvent = useCallback(\n        event => {\n            if (!elementRef.current) {\n                return [null, null]\n            }\n\n            const [x, y] = getRelativeCursor(elementRef.current, event)\n            const index = delaunay.find(x, y)\n\n            return [index, index !== undefined ? nodes[index] : null] as [number, Datum | null]\n        },\n        [elementRef, delaunay]\n    )\n\n    const handleMouseEnter = useCallback(\n        (event: React.MouseEvent) => {\n            const [index, node] = getIndexAndNodeFromEvent(event)\n            setCurrentIndex(index)\n            if (node) {\n                onMouseEnter?.(node, event)\n            }\n        },\n        [getIndexAndNodeFromEvent, setCurrentIndex, onMouseEnter]\n    )\n\n    const handleMouseMove = useCallback(\n        (event: React.MouseEvent) => {\n            const [index, node] = getIndexAndNodeFromEvent(event)\n            setCurrentIndex(index)\n            if (node) {\n                onMouseMove?.(node, event)\n            }\n        },\n        [getIndexAndNodeFromEvent, setCurrentIndex, onMouseMove]\n    )\n\n    const handleMouseLeave = useCallback(\n        (event: React.MouseEvent) => {\n            setCurrentIndex(null)\n            if (onMouseLeave) {\n                let previousNode: Datum | undefined = undefined\n                if (currentIndex !== null) {\n                    previousNode = nodes[currentIndex]\n                }\n                previousNode && onMouseLeave(previousNode, event)\n            }\n        },\n        [setCurrentIndex, currentIndex, onMouseLeave, nodes]\n    )\n\n    const handleClick = useCallback(\n        (event: React.MouseEvent) => {\n            const [index, node] = getIndexAndNodeFromEvent(event)\n            setCurrentIndex(index)\n            if (node) {\n                onClick?.(node, event)\n            }\n        },\n        [getIndexAndNodeFromEvent, setCurrentIndex, onClick]\n    )\n\n    return (\n        <g ref={elementRef}>\n            {debug && voronoi && (\n                <>\n                    <path d={voronoiPath} stroke=\"red\" strokeWidth={1} opacity={0.75} />\n                    {/* highlight current cell */}\n                    {currentIndex !== null && (\n                        <path fill=\"pink\" opacity={0.35} d={voronoi.renderCell(currentIndex)} />\n                    )}\n                </>\n            )}\n            {/* transparent rect to intercept mouse events */}\n            <rect\n                width={width}\n                height={height}\n                fill=\"red\"\n                opacity={0}\n                style={{ cursor: 'auto' }}\n                onMouseEnter={handleMouseEnter}\n                onMouseMove={handleMouseMove}\n                onMouseLeave={handleMouseLeave}\n                onClick={handleClick}\n            />\n        </g>\n    )\n}\n","import { ResponsiveWrapper } from '@nivo/core'\nimport { VoronoiSvgProps } from './types'\nimport { Voronoi } from './Voronoi'\n\ntype ResponsiveVoronoiProps = Partial<Omit<VoronoiSvgProps, 'data' | 'width' | 'height'>> &\n    Pick<VoronoiSvgProps, 'data'>\n\nexport const ResponsiveVoronoi = (props: ResponsiveVoronoiProps) => (\n    <ResponsiveWrapper>\n        {({ width, height }: { width: number; height: number }) => (\n            <Voronoi width={width} height={height} {...props} />\n        )}\n    </ResponsiveWrapper>\n)\n","import { Delaunay, Voronoi } from 'd3-delaunay'\n\nexport const renderVoronoiToCanvas = (\n    ctx: CanvasRenderingContext2D,\n    voronoi: Voronoi<Delaunay.Point>\n) => {\n    ctx.save()\n\n    ctx.globalAlpha = 0.75\n    ctx.beginPath()\n    voronoi.render(ctx)\n    ctx.strokeStyle = 'red'\n    ctx.lineWidth = 1\n    ctx.stroke()\n\n    ctx.restore()\n}\n\nexport const renderVoronoiCellToCanvas = (\n    ctx: CanvasRenderingContext2D,\n    voronoi: Voronoi<Delaunay.Point>,\n    index: number\n) => {\n    ctx.save()\n\n    ctx.globalAlpha = 0.35\n    ctx.beginPath()\n    voronoi.renderCell(index, ctx)\n    ctx.fillStyle = 'red'\n    ctx.fill()\n\n    ctx.restore()\n}\n"],"names":["defaultVoronoiProps","xDomain","yDomain","layers","enableLinks","linkLineWidth","linkLineColor","enableCells","cellLineWidth","cellLineColor","enablePoints","pointSize","pointColor","role","getAccessor","directive","datum","computeMeshPoints","points","x","y","getX","getY","map","point","computeMesh","width","height","debug","delaunay","Delaunay","from","voronoi","undefined","useVoronoiMesh","points2d","useMemo","useVoronoi","data","xScale","scaleLinear","domain","range","yScale","d","p","useVoronoiLayerContext","InnerVoronoi","partialMargin","margin","useDimensions","outerWidth","outerHeight","innerWidth","innerHeight","layerById","links","cells","bounds","includes","_jsx","stroke","strokeWidth","fill","render","renderPoints","renderBounds","layerContext","SvgWrapper","layer","i","Fragment","createElement","Voronoi","theme","otherProps","Container","isInteractive","animate","nodes","onMouseEnter","onMouseMove","onMouseLeave","onClick","elementRef","useRef","useState","currentIndex","setCurrentIndex","voronoiPath","getIndexAndNodeFromEvent","useCallback","event","current","getRelativeCursor","index","find","handleMouseEnter","node","handleMouseMove","handleMouseLeave","previousNode","handleClick","_jsxs","ref","opacity","renderCell","style","cursor","props","ResponsiveWrapper","ctx","save","globalAlpha","beginPath","fillStyle","restore","strokeStyle","lineWidth"],"mappings":"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"}