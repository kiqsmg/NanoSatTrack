{"version":3,"file":"nivo-bar.es.js","sources":["../src/BarAnnotations.tsx","../src/BarLegends.tsx","../src/BarItem.tsx","../src/props.ts","../src/BarTooltip.tsx","../src/compute/common.ts","../src/compute/grouped.ts","../src/compute/stacked.ts","../src/compute/legends.ts","../src/hooks.ts","../src/Bar.tsx","../src/BarCanvas.tsx","../src/ResponsiveBar.tsx","../src/ResponsiveBarCanvas.tsx"],"sourcesContent":["import { Annotation, useAnnotations } from '@nivo/annotations'\nimport { BarAnnotationsProps } from './types'\n\nexport const BarAnnotations = <RawDatum,>({ bars, annotations }: BarAnnotationsProps<RawDatum>) => {\n    const boundAnnotations = useAnnotations({\n        data: bars,\n        annotations,\n        getPosition: bar => ({\n            x: bar.x + bar.width / 2,\n            y: bar.y + bar.height / 2,\n        }),\n        getDimensions: ({ height, width }) => ({\n            width,\n            height,\n            size: Math.max(width, height),\n        }),\n    })\n\n    return (\n        <>\n            {boundAnnotations.map((annotation, i) => (\n                <Annotation key={i} {...annotation} />\n            ))}\n        </>\n    )\n}\n","import { BoxLegendSvg } from '@nivo/legends'\nimport { BarLegendProps, LegendData } from './types'\n\ninterface BarLegendsProps {\n    width: number\n    height: number\n    legends: [BarLegendProps, LegendData[]][]\n    toggleSerie: (id: string | number) => void\n}\n\nexport const BarLegends = ({ width, height, legends, toggleSerie }: BarLegendsProps) => (\n    <>\n        {legends.map(([legend, data], i) => (\n            <BoxLegendSvg\n                key={i}\n                {...legend}\n                containerWidth={width}\n                containerHeight={height}\n                data={legend.data ?? data}\n                toggleSerie={\n                    legend.toggleSerie && legend.dataFrom === 'keys' ? toggleSerie : undefined\n                }\n            />\n        ))}\n    </>\n)\n","import { createElement, MouseEvent, useCallback, useMemo } from 'react'\nimport { animated, to } from '@react-spring/web'\nimport { useTheme } from '@nivo/core'\nimport { useTooltip } from '@nivo/tooltip'\nimport { BarDatum, BarItemProps } from './types'\n\nexport const BarItem = <RawDatum extends BarDatum>({\n    bar: { data, ...bar },\n\n    style: {\n        borderColor,\n        color,\n        height,\n        labelColor,\n        labelOpacity,\n        labelX,\n        labelY,\n        transform,\n        width,\n    },\n\n    borderRadius,\n    borderWidth,\n\n    label,\n    shouldRenderLabel,\n\n    isInteractive,\n    onClick,\n    onMouseEnter,\n    onMouseLeave,\n\n    tooltip,\n\n    isFocusable,\n    ariaLabel,\n    ariaLabelledBy,\n    ariaDescribedBy,\n}: BarItemProps<RawDatum>) => {\n    const theme = useTheme()\n    const { showTooltipFromEvent, showTooltipAt, hideTooltip } = useTooltip()\n\n    const renderTooltip = useMemo(\n        () => () => createElement(tooltip, { ...bar, ...data }),\n        [tooltip, bar, data]\n    )\n\n    const handleClick = useCallback(\n        (event: MouseEvent<SVGRectElement>) => {\n            onClick?.({ color: bar.color, ...data }, event)\n        },\n        [bar, data, onClick]\n    )\n    const handleTooltip = useCallback(\n        (event: MouseEvent<SVGRectElement>) => showTooltipFromEvent(renderTooltip(), event),\n        [showTooltipFromEvent, renderTooltip]\n    )\n    const handleMouseEnter = useCallback(\n        (event: MouseEvent<SVGRectElement>) => {\n            onMouseEnter?.(data, event)\n            showTooltipFromEvent(renderTooltip(), event)\n        },\n        [data, onMouseEnter, showTooltipFromEvent, renderTooltip]\n    )\n    const handleMouseLeave = useCallback(\n        (event: MouseEvent<SVGRectElement>) => {\n            onMouseLeave?.(data, event)\n            hideTooltip()\n        },\n        [data, hideTooltip, onMouseLeave]\n    )\n\n    // extra handlers to allow keyboard navigation\n    const handleFocus = useCallback(() => {\n        showTooltipAt(renderTooltip(), [bar.absX + bar.width / 2, bar.absY])\n    }, [showTooltipAt, renderTooltip, bar])\n    const handleBlur = useCallback(() => {\n        hideTooltip()\n    }, [hideTooltip])\n\n    return (\n        <animated.g transform={transform}>\n            <animated.rect\n                width={to(width, value => Math.max(value, 0))}\n                height={to(height, value => Math.max(value, 0))}\n                rx={borderRadius}\n                ry={borderRadius}\n                fill={data.fill ?? color}\n                strokeWidth={borderWidth}\n                stroke={borderColor}\n                focusable={isFocusable}\n                tabIndex={isFocusable ? 0 : undefined}\n                aria-label={ariaLabel ? ariaLabel(data) : undefined}\n                aria-labelledby={ariaLabelledBy ? ariaLabelledBy(data) : undefined}\n                aria-describedby={ariaDescribedBy ? ariaDescribedBy(data) : undefined}\n                onMouseEnter={isInteractive ? handleMouseEnter : undefined}\n                onMouseMove={isInteractive ? handleTooltip : undefined}\n                onMouseLeave={isInteractive ? handleMouseLeave : undefined}\n                onClick={isInteractive ? handleClick : undefined}\n                onFocus={isInteractive && isFocusable ? handleFocus : undefined}\n                onBlur={isInteractive && isFocusable ? handleBlur : undefined}\n            />\n            {shouldRenderLabel && (\n                <animated.text\n                    x={labelX}\n                    y={labelY}\n                    textAnchor=\"middle\"\n                    dominantBaseline=\"central\"\n                    fillOpacity={labelOpacity}\n                    style={{\n                        ...theme.labels.text,\n                        pointerEvents: 'none',\n                        fill: labelColor,\n                    }}\n                >\n                    {label}\n                </animated.text>\n            )}\n        </animated.g>\n    )\n}\n","import { BarItem } from './BarItem'\nimport { BarTooltip } from './BarTooltip'\nimport { ComputedDatum } from './types'\nimport { InheritedColorConfig, OrdinalColorScaleConfig } from '@nivo/colors'\nimport { ScaleBandSpec, ScaleSpec } from '@nivo/scales'\n\nexport const defaultProps = {\n    indexBy: 'id',\n    keys: ['value'],\n\n    groupMode: 'stacked' as const,\n    layout: 'vertical' as const,\n    reverse: false,\n\n    minValue: 'auto' as const,\n    maxValue: 'auto' as const,\n\n    valueScale: { type: 'linear' } as ScaleSpec,\n    indexScale: { type: 'band', round: true } as ScaleBandSpec,\n\n    padding: 0.1,\n    innerPadding: 0,\n\n    axisBottom: {},\n    axisLeft: {},\n    enableGridX: false,\n    enableGridY: true,\n\n    enableLabel: true,\n    label: 'formattedValue',\n    labelSkipWidth: 0,\n    labelSkipHeight: 0,\n    labelTextColor: { from: 'theme', theme: 'labels.text.fill' },\n\n    colorBy: 'id' as const,\n    colors: { scheme: 'nivo' } as OrdinalColorScaleConfig,\n\n    borderRadius: 0,\n    borderWidth: 0,\n    borderColor: { from: 'color' } as InheritedColorConfig<any>,\n\n    isInteractive: true,\n    tooltip: BarTooltip,\n    tooltipLabel: <RawDatum>(datum: ComputedDatum<RawDatum>) => `${datum.id} - ${datum.indexValue}`,\n\n    legends: [],\n    initialHiddenIds: [],\n    annotations: [],\n    markers: [],\n}\n\nexport const svgDefaultProps = {\n    ...defaultProps,\n    layers: ['grid', 'axes', 'bars', 'markers', 'legends', 'annotations'],\n    barComponent: BarItem,\n\n    defs: [],\n    fill: [],\n\n    animate: true,\n    motionConfig: 'default',\n\n    role: 'img',\n    isFocusable: false,\n}\n\nexport const canvasDefaultProps = {\n    ...defaultProps,\n    layers: ['grid', 'axes', 'bars', 'legends', 'annotations'],\n\n    pixelRatio: typeof window !== 'undefined' ? window.devicePixelRatio ?? 1 : 1,\n}\n","import { BarTooltipProps } from './types'\nimport { BasicTooltip } from '@nivo/tooltip'\n\nexport const BarTooltip = <RawDatum,>({ color, label, ...data }: BarTooltipProps<RawDatum>) => {\n    return <BasicTooltip id={label} value={data.formattedValue} enableChip={true} color={color} />\n}\n","import { ScaleBandSpec, ScaleBand, computeScale } from '@nivo/scales'\n\n/**\n * Generates indexed scale.\n */\nexport const getIndexScale = <RawDatum>(\n    data: RawDatum[],\n    getIndex: (datum: RawDatum) => string,\n    padding: number,\n    indexScale: ScaleBandSpec,\n    size: number,\n    axis: 'x' | 'y'\n) => {\n    return (\n        computeScale(\n            indexScale,\n            { all: data.map(getIndex), min: 0, max: 0 },\n            size,\n            axis\n        ) as ScaleBand<string>\n    ).padding(padding)\n}\n\n/**\n * This method ensures all the provided keys exist in the entire series.\n */\nexport const normalizeData = <RawDatum>(data: RawDatum[], keys: string[]) =>\n    data.map(\n        item =>\n            ({\n                ...keys.reduce<Record<string, unknown>>((acc, key) => {\n                    acc[key] = null\n                    return acc\n                }, {}),\n                ...item,\n            } as RawDatum)\n    )\n\nexport const filterNullValues = <RawDatum extends Record<string, unknown>>(data: RawDatum) =>\n    Object.keys(data).reduce<Record<string, unknown>>((acc, key) => {\n        if (data[key]) {\n            acc[key] = data[key]\n        }\n        return acc\n    }, {}) as Exclude<RawDatum, null | undefined | false | '' | 0>\n\nexport const coerceValue = <T>(value: T) => [value, Number(value)] as const\n","import { Margin } from '@nivo/core'\nimport { OrdinalColorScale } from '@nivo/colors'\nimport { Scale, ScaleBand, computeScale } from '@nivo/scales'\nimport { BarDatum, BarSvgProps, ComputedBarDatum, ComputedDatum } from '../types'\nimport { coerceValue, filterNullValues, getIndexScale, normalizeData } from './common'\n\ntype Params<RawDatum, XScaleInput, YScaleInput> = {\n    data: RawDatum[]\n    formatValue: (value: number) => string\n    getColor: OrdinalColorScale<ComputedDatum<RawDatum>>\n    getIndex: (datum: RawDatum) => string\n    getTooltipLabel: (datum: ComputedDatum<RawDatum>) => string\n    innerPadding: number\n    keys: string[]\n    xScale: XScaleInput extends string ? ScaleBand<XScaleInput> : Scale<XScaleInput, number>\n    yScale: YScaleInput extends string ? ScaleBand<YScaleInput> : Scale<YScaleInput, number>\n    margin: Margin\n}\n\nconst gt = (value: number, other: number) => value > other\nconst lt = (value: number, other: number) => value < other\n\nconst range = (start: number, end: number) =>\n    Array.from(' '.repeat(end - start), (_, index) => start + index)\n\nconst clampToZero = (value: number) => (gt(value, 0) ? 0 : value)\nconst zeroIfNotFinite = (value: number) => (isFinite(value) ? value : 0)\n\n/**\n * Generates x/y scales & bars for vertical grouped bar chart.\n */\nconst generateVerticalGroupedBars = <RawDatum extends Record<string, unknown>>(\n    {\n        data,\n        formatValue,\n        getColor,\n        getIndex,\n        getTooltipLabel,\n        innerPadding = 0,\n        keys,\n        xScale,\n        yScale,\n        margin,\n    }: Params<RawDatum, string, number>,\n    barWidth: number,\n    reverse: boolean,\n    yRef: number\n): ComputedBarDatum<RawDatum>[] => {\n    const compare = reverse ? lt : gt\n    const getY = (d: number) => (compare(d, 0) ? yScale(d) ?? 0 : yRef)\n    const getHeight = (d: number, y: number) => (compare(d, 0) ? yRef - y : (yScale(d) ?? 0) - yRef)\n    const cleanedData = data.map(filterNullValues)\n\n    const bars: ComputedBarDatum<RawDatum>[] = []\n    keys.forEach((key, i) =>\n        range(0, xScale.domain().length).forEach(index => {\n            const [rawValue, value] = coerceValue(data[index][key])\n            const indexValue = getIndex(data[index])\n            const x = (xScale(indexValue) ?? 0) + barWidth * i + innerPadding * i\n            const y = getY(value)\n            const barHeight = getHeight(value, y)\n            const barData: ComputedDatum<RawDatum> = {\n                id: key,\n                value: rawValue === null ? rawValue : value,\n                formattedValue: formatValue(value),\n                hidden: false,\n                index,\n                indexValue,\n                data: cleanedData[index],\n            }\n\n            bars.push({\n                key: `${key}.${barData.indexValue}`,\n                index: bars.length,\n                data: barData,\n                x,\n                y,\n                absX: margin.left + x,\n                absY: margin.top + y,\n                width: barWidth,\n                height: barHeight,\n                color: getColor(barData),\n                label: getTooltipLabel(barData),\n            })\n        })\n    )\n\n    return bars\n}\n\n/**\n * Generates x/y scales & bars for horizontal grouped bar chart.\n */\nconst generateHorizontalGroupedBars = <RawDatum extends Record<string, unknown>>(\n    {\n        data,\n        formatValue,\n        getIndex,\n        getColor,\n        getTooltipLabel,\n        keys,\n        innerPadding = 0,\n        xScale,\n        yScale,\n        margin,\n    }: Params<RawDatum, number, string>,\n    barHeight: number,\n    reverse: boolean,\n    xRef: number\n): ComputedBarDatum<RawDatum>[] => {\n    const compare = reverse ? lt : gt\n    const getX = (d: number) => (compare(d, 0) ? xRef : xScale(d) ?? 0)\n    const getWidth = (d: number, x: number) => (compare(d, 0) ? (xScale(d) ?? 0) - xRef : xRef - x)\n    const cleanedData = data.map(filterNullValues)\n\n    const bars: ComputedBarDatum<RawDatum>[] = []\n    keys.forEach((key, i) =>\n        range(0, yScale.domain().length).forEach(index => {\n            const [rawValue, value] = coerceValue(data[index][key])\n            const indexValue = getIndex(data[index])\n            const x = getX(value)\n            const y = (yScale(indexValue) ?? 0) + barHeight * i + innerPadding * i\n            const barWidth = getWidth(value, x)\n            const barData: ComputedDatum<RawDatum> = {\n                id: key,\n                value: rawValue === null ? rawValue : value,\n                formattedValue: formatValue(value),\n                hidden: false,\n                index,\n                indexValue,\n                data: cleanedData[index],\n            }\n\n            bars.push({\n                key: `${key}.${barData.indexValue}`,\n                index: bars.length,\n                data: barData,\n                x,\n                y,\n                absX: margin.left + x,\n                absY: margin.top + y,\n                width: barWidth,\n                height: barHeight,\n                color: getColor(barData),\n                label: getTooltipLabel(barData),\n            })\n        })\n    )\n\n    return bars\n}\n\n/**\n * Generates x/y scales & bars for grouped bar chart.\n */\nexport const generateGroupedBars = <RawDatum extends BarDatum>({\n    layout,\n    minValue,\n    maxValue,\n    reverse,\n    width,\n    height,\n    padding = 0,\n    innerPadding = 0,\n    valueScale,\n    indexScale: indexScaleConfig,\n    hiddenIds = [],\n    ...props\n}: Pick<\n    Required<BarSvgProps<RawDatum>>,\n    | 'data'\n    | 'height'\n    | 'indexScale'\n    | 'innerPadding'\n    | 'keys'\n    | 'layout'\n    | 'maxValue'\n    | 'minValue'\n    | 'padding'\n    | 'reverse'\n    | 'valueScale'\n    | 'width'\n> & {\n    formatValue: (value: number) => string\n    getColor: OrdinalColorScale<ComputedDatum<RawDatum>>\n    getIndex: (datum: RawDatum) => string\n    getTooltipLabel: (datum: ComputedDatum<RawDatum>) => string\n    margin: Margin\n    hiddenIds?: string[]\n}) => {\n    const keys = props.keys.filter(key => !hiddenIds.includes(key))\n    const data = normalizeData(props.data, keys)\n    const [axis, otherAxis, size] =\n        layout === 'vertical' ? (['y', 'x', width] as const) : (['x', 'y', height] as const)\n    const indexScale = getIndexScale(\n        data,\n        props.getIndex,\n        padding,\n        indexScaleConfig,\n        size,\n        otherAxis\n    )\n\n    const scaleSpec = {\n        max: maxValue,\n        min: minValue,\n        reverse,\n        ...valueScale,\n    }\n\n    const clampMin = scaleSpec.min === 'auto' ? clampToZero : (value: number) => value\n\n    const values = data\n        .reduce<number[]>((acc, entry) => [...acc, ...keys.map(k => entry[k] as number)], [])\n        .filter(Boolean)\n    const min = clampMin(Math.min(...values))\n    const max = zeroIfNotFinite(Math.max(...values))\n\n    const scale = computeScale(\n        scaleSpec as any,\n        { all: values, min, max },\n        axis === 'x' ? width : height,\n        axis\n    )\n\n    const [xScale, yScale] = layout === 'vertical' ? [indexScale, scale] : [scale, indexScale]\n\n    const bandwidth = (indexScale.bandwidth() - innerPadding * (keys.length - 1)) / keys.length\n    const params = [\n        { ...props, data, keys, innerPadding, xScale, yScale } as Params<RawDatum, any, any>,\n        bandwidth,\n        scaleSpec.reverse,\n        scale(0) ?? 0,\n    ] as const\n\n    const bars: ComputedBarDatum<RawDatum>[] =\n        bandwidth > 0\n            ? layout === 'vertical'\n                ? generateVerticalGroupedBars(...params)\n                : generateHorizontalGroupedBars(...params)\n            : []\n\n    return { xScale, yScale, bars }\n}\n","import { Margin } from '@nivo/core'\nimport { OrdinalColorScale } from '@nivo/colors'\nimport { Scale, ScaleBand, computeScale } from '@nivo/scales'\nimport { Series, SeriesPoint, stack, stackOffsetDiverging } from 'd3-shape'\nimport { BarDatum, BarSvgProps, ComputedBarDatum, ComputedDatum } from '../types'\nimport { coerceValue, filterNullValues, getIndexScale, normalizeData } from './common'\n\ntype StackDatum<RawDatum> = SeriesPoint<RawDatum>\n\ntype Params<RawDatum, XScaleInput, YScaleInput> = {\n    formatValue: (value: number) => string\n    getColor: OrdinalColorScale<ComputedDatum<RawDatum>>\n    getIndex: (datum: RawDatum) => string\n    getTooltipLabel: (datum: ComputedDatum<RawDatum>) => string\n    innerPadding: number\n    stackedData: Series<RawDatum, string>[]\n    xScale: XScaleInput extends string ? ScaleBand<XScaleInput> : Scale<XScaleInput, number>\n    yScale: YScaleInput extends string ? ScaleBand<YScaleInput> : Scale<YScaleInput, number>\n    margin: Margin\n}\n\nconst flattenDeep = <T>(arr: T[]): T =>\n    arr.some(Array.isArray) ? flattenDeep(([] as T[]).concat(...arr)) : (arr as unknown as T)\n\nconst filterZerosIfLog = (array: number[], type: string) =>\n    type === 'log' ? array.filter(num => num !== 0) : array\n\n/**\n * Generates x/y scales & bars for vertical stacked bar chart.\n */\nconst generateVerticalStackedBars = <RawDatum extends Record<string, unknown>>(\n    {\n        formatValue,\n        getColor,\n        getIndex,\n        getTooltipLabel,\n        innerPadding,\n        stackedData,\n        xScale,\n        yScale,\n        margin,\n    }: Params<RawDatum, string, number>,\n    barWidth: number,\n    reverse: boolean\n): ComputedBarDatum<RawDatum>[] => {\n    const getY = (d: StackDatum<RawDatum>) => yScale(d[reverse ? 0 : 1])\n    const getHeight = (d: StackDatum<RawDatum>, y: number) => (yScale(d[reverse ? 1 : 0]) ?? 0) - y\n\n    const bars: ComputedBarDatum<RawDatum>[] = []\n    stackedData.forEach(stackedDataItem =>\n        xScale.domain().forEach((index, i) => {\n            const d = stackedDataItem[i]\n            const x = xScale(getIndex(d.data)) ?? 0\n            const y = (getY(d) ?? 0) + innerPadding * 0.5\n            const barHeight = getHeight(d, y) - innerPadding\n            const [rawValue, value] = coerceValue(d.data[stackedDataItem.key])\n\n            const barData: ComputedDatum<RawDatum> = {\n                id: stackedDataItem.key,\n                value: rawValue === null ? rawValue : value,\n                formattedValue: formatValue(value),\n                hidden: false,\n                index: i,\n                indexValue: index,\n                data: filterNullValues(d.data),\n            }\n\n            bars.push({\n                key: `${stackedDataItem.key}.${index}`,\n                index: bars.length,\n                data: barData,\n                x,\n                y,\n                absX: margin.left + x,\n                absY: margin.top + y,\n                width: barWidth,\n                height: barHeight,\n                color: getColor(barData),\n                label: getTooltipLabel(barData),\n            })\n        })\n    )\n\n    return bars\n}\n\n/**\n * Generates x/y scales & bars for horizontal stacked bar chart.\n */\nconst generateHorizontalStackedBars = <RawDatum extends Record<string, unknown>>(\n    {\n        formatValue,\n        getColor,\n        getIndex,\n        getTooltipLabel,\n        innerPadding,\n        stackedData,\n        xScale,\n        yScale,\n        margin,\n    }: Params<RawDatum, number, string>,\n    barHeight: number,\n    reverse: boolean\n): ComputedBarDatum<RawDatum>[] => {\n    const getX = (d: StackDatum<RawDatum>) => xScale(d[reverse ? 1 : 0])\n    const getWidth = (d: StackDatum<RawDatum>, x: number) => (xScale(d[reverse ? 0 : 1]) ?? 0) - x\n\n    const bars: ComputedBarDatum<RawDatum>[] = []\n    stackedData.forEach(stackedDataItem =>\n        yScale.domain().forEach((index, i) => {\n            const d = stackedDataItem[i]\n            const y = yScale(getIndex(d.data)) ?? 0\n            const x = (getX(d) ?? 0) + innerPadding * 0.5\n            const barWidth = getWidth(d, x) - innerPadding\n            const [rawValue, value] = coerceValue(d.data[stackedDataItem.key])\n\n            const barData: ComputedDatum<RawDatum> = {\n                id: stackedDataItem.key,\n                value: rawValue === null ? rawValue : value,\n                formattedValue: formatValue(value),\n                hidden: false,\n                index: i,\n                indexValue: index,\n                data: filterNullValues(d.data),\n            }\n\n            bars.push({\n                key: `${stackedDataItem.key}.${index}`,\n                index: bars.length,\n                data: barData,\n                x,\n                y,\n                absX: margin.left + x,\n                absY: margin.top + y,\n                width: barWidth,\n                height: barHeight,\n                color: getColor(barData),\n                label: getTooltipLabel(barData),\n            })\n        })\n    )\n\n    return bars\n}\n\n/**\n * Generates x/y scales & bars for stacked bar chart.\n */\nexport const generateStackedBars = <RawDatum extends BarDatum>({\n    data,\n    layout,\n    minValue,\n    maxValue,\n    reverse,\n    width,\n    height,\n    padding = 0,\n    valueScale,\n    indexScale: indexScaleConfig,\n    hiddenIds = [],\n    ...props\n}: Pick<\n    Required<BarSvgProps<RawDatum>>,\n    | 'data'\n    | 'height'\n    | 'indexScale'\n    | 'innerPadding'\n    | 'keys'\n    | 'layout'\n    | 'maxValue'\n    | 'minValue'\n    | 'padding'\n    | 'reverse'\n    | 'valueScale'\n    | 'width'\n> & {\n    formatValue: (value: number) => string\n    getColor: OrdinalColorScale<ComputedDatum<RawDatum>>\n    getIndex: (datum: RawDatum) => string\n    getTooltipLabel: (datum: ComputedDatum<RawDatum>) => string\n    margin: Margin\n    hiddenIds?: string[]\n}) => {\n    const keys = props.keys.filter(key => !hiddenIds.includes(key))\n    const stackedData = stack<RawDatum, string>().keys(keys).offset(stackOffsetDiverging)(\n        normalizeData(data, keys)\n    )\n\n    const [axis, otherAxis, size] =\n        layout === 'vertical' ? (['y', 'x', width] as const) : (['x', 'y', height] as const)\n    const indexScale = getIndexScale(\n        data,\n        props.getIndex,\n        padding,\n        indexScaleConfig,\n        size,\n        otherAxis\n    )\n\n    const scaleSpec = {\n        max: maxValue,\n        min: minValue,\n        reverse,\n        ...valueScale,\n    }\n\n    const values = filterZerosIfLog(\n        flattenDeep(stackedData as unknown as number[][]),\n        valueScale.type\n    )\n    const min = Math.min(...values)\n    const max = Math.max(...values)\n\n    const scale = computeScale(\n        scaleSpec as any,\n        { all: values, min, max },\n        axis === 'x' ? width : height,\n        axis\n    )\n\n    const [xScale, yScale] = layout === 'vertical' ? [indexScale, scale] : [scale, indexScale]\n\n    const innerPadding = props.innerPadding > 0 ? props.innerPadding : 0\n    const bandwidth = indexScale.bandwidth()\n    const params = [\n        { ...props, innerPadding, stackedData, xScale, yScale } as Params<RawDatum, any, any>,\n        bandwidth,\n        scaleSpec.reverse,\n    ] as const\n\n    const bars: ComputedBarDatum<RawDatum>[] =\n        bandwidth > 0\n            ? layout === 'vertical'\n                ? generateVerticalStackedBars(...params)\n                : generateHorizontalStackedBars(...params)\n            : []\n\n    return { xScale, yScale, bars }\n}\n","import {\n    BarDatum,\n    BarLegendProps,\n    BarSvgProps,\n    BarsWithHidden,\n    LegendData,\n    LegendLabelDatum,\n} from '../types'\nimport { getPropertyAccessor } from '@nivo/core'\nimport { uniqBy } from 'lodash'\n\nexport const getLegendDataForKeys = <RawDatum extends BarDatum>(\n    bars: BarsWithHidden<RawDatum>,\n    layout: NonNullable<BarSvgProps<RawDatum>['layout']>,\n    direction: BarLegendProps['direction'],\n    groupMode: NonNullable<BarSvgProps<RawDatum>['groupMode']>,\n    reverse: boolean,\n    getLegendLabel: (datum: LegendLabelDatum<RawDatum>) => string\n): LegendData[] => {\n    const data = uniqBy(\n        bars.map(bar => ({\n            id: bar.data.id,\n            label: getLegendLabel(bar.data),\n            hidden: bar.data.hidden,\n            color: bar.color ?? '#000',\n        })),\n        ({ id }) => id\n    )\n\n    if (\n        (layout === 'vertical' &&\n            groupMode === 'stacked' &&\n            direction === 'column' &&\n            reverse !== true) ||\n        (layout === 'horizontal' && groupMode === 'stacked' && reverse === true)\n    ) {\n        data.reverse()\n    }\n\n    return data\n}\n\nexport const getLegendDataForIndexes = <RawDatum extends BarDatum>(\n    bars: BarsWithHidden<RawDatum>,\n    layout: NonNullable<BarSvgProps<RawDatum>['layout']>,\n    getLegendLabel: (datum: LegendLabelDatum<RawDatum>) => string\n): LegendData[] => {\n    const data = uniqBy(\n        bars.map(bar => ({\n            id: bar.data.indexValue ?? '',\n            label: getLegendLabel(bar.data),\n            hidden: bar.data.hidden,\n            color: bar.color ?? '#000',\n        })),\n        ({ id }) => id\n    )\n\n    if (layout === 'horizontal') {\n        data.reverse()\n    }\n\n    return data\n}\n\nexport const getLegendData = <RawDatum extends BarDatum>({\n    bars,\n    direction,\n    from,\n    groupMode,\n    layout,\n    legendLabel,\n    reverse,\n}: Pick<Required<BarSvgProps<RawDatum>>, 'layout' | 'groupMode' | 'reverse'> & {\n    bars: BarsWithHidden<RawDatum>\n    direction: BarLegendProps['direction']\n    from: BarLegendProps['dataFrom']\n    legendLabel: BarSvgProps<RawDatum>['legendLabel']\n}) => {\n    const getLegendLabel = getPropertyAccessor(\n        legendLabel ?? (from === 'indexes' ? 'indexValue' : 'id')\n    )\n\n    if (from === 'indexes') {\n        return getLegendDataForIndexes(bars, layout, getLegendLabel)\n    }\n\n    return getLegendDataForKeys(bars, layout, direction, groupMode, reverse, getLegendLabel)\n}\n","import { useCallback, useMemo, useState } from 'react'\nimport { useInheritedColor, useOrdinalColorScale } from '@nivo/colors'\nimport { usePropertyAccessor, useTheme, useValueFormatter, Margin } from '@nivo/core'\nimport {\n    DataProps,\n    BarCommonProps,\n    BarDatum,\n    ComputedBarDatumWithValue,\n    LegendData,\n    BarLegendProps,\n} from './types'\nimport { defaultProps } from './props'\nimport { generateGroupedBars, generateStackedBars, getLegendData } from './compute'\n\nexport const useBar = <RawDatum extends BarDatum>({\n    indexBy = defaultProps.indexBy,\n    keys = defaultProps.keys,\n    label = defaultProps.label,\n    tooltipLabel = defaultProps.tooltipLabel,\n    valueFormat,\n    colors = defaultProps.colors,\n    colorBy = defaultProps.colorBy,\n    borderColor = defaultProps.borderColor,\n    labelTextColor = defaultProps.labelTextColor,\n    groupMode = defaultProps.groupMode,\n    layout = defaultProps.layout,\n    reverse = defaultProps.reverse,\n    data,\n    minValue = defaultProps.minValue,\n    maxValue = defaultProps.maxValue,\n    margin,\n    width,\n    height,\n    padding = defaultProps.padding,\n    innerPadding = defaultProps.innerPadding,\n    valueScale = defaultProps.valueScale,\n    indexScale = defaultProps.indexScale,\n    initialHiddenIds = defaultProps.initialHiddenIds,\n    enableLabel = defaultProps.enableLabel,\n    labelSkipWidth = defaultProps.labelSkipWidth,\n    labelSkipHeight = defaultProps.labelSkipHeight,\n    legends = defaultProps.legends,\n    legendLabel,\n}: {\n    indexBy?: BarCommonProps<RawDatum>['indexBy']\n    label?: BarCommonProps<RawDatum>['label']\n    tooltipLabel?: BarCommonProps<RawDatum>['tooltipLabel']\n    valueFormat?: BarCommonProps<RawDatum>['valueFormat']\n    colors?: BarCommonProps<RawDatum>['colors']\n    colorBy?: BarCommonProps<RawDatum>['colorBy']\n    borderColor?: BarCommonProps<RawDatum>['borderColor']\n    labelTextColor?: BarCommonProps<RawDatum>['labelTextColor']\n    groupMode?: BarCommonProps<RawDatum>['groupMode']\n    layout?: BarCommonProps<RawDatum>['layout']\n    reverse?: BarCommonProps<RawDatum>['reverse']\n    data: DataProps<RawDatum>['data']\n    keys?: BarCommonProps<RawDatum>['keys']\n    minValue?: BarCommonProps<RawDatum>['minValue']\n    maxValue?: BarCommonProps<RawDatum>['maxValue']\n    margin: Margin\n    width: number\n    height: number\n    padding?: BarCommonProps<RawDatum>['padding']\n    innerPadding?: BarCommonProps<RawDatum>['innerPadding']\n    valueScale?: BarCommonProps<RawDatum>['valueScale']\n    indexScale?: BarCommonProps<RawDatum>['indexScale']\n    initialHiddenIds?: BarCommonProps<RawDatum>['initialHiddenIds']\n    enableLabel?: BarCommonProps<RawDatum>['enableLabel']\n    labelSkipWidth?: BarCommonProps<RawDatum>['labelSkipWidth']\n    labelSkipHeight?: BarCommonProps<RawDatum>['labelSkipHeight']\n    legends?: BarCommonProps<RawDatum>['legends']\n    legendLabel?: BarCommonProps<RawDatum>['legendLabel']\n}) => {\n    const [hiddenIds, setHiddenIds] = useState(initialHiddenIds ?? [])\n    const toggleSerie = useCallback(id => {\n        setHiddenIds(state =>\n            state.indexOf(id) > -1 ? state.filter(item => item !== id) : [...state, id]\n        )\n    }, [])\n\n    const getIndex = usePropertyAccessor(indexBy)\n    const getLabel = usePropertyAccessor(label)\n    const getTooltipLabel = usePropertyAccessor(tooltipLabel)\n    const formatValue = useValueFormatter(valueFormat)\n\n    const theme = useTheme()\n    const getColor = useOrdinalColorScale(colors, colorBy)\n    const getBorderColor = useInheritedColor<ComputedBarDatumWithValue<RawDatum>>(\n        borderColor,\n        theme\n    )\n    const getLabelColor = useInheritedColor<ComputedBarDatumWithValue<RawDatum>>(\n        labelTextColor,\n        theme\n    )\n\n    const generateBars = groupMode === 'grouped' ? generateGroupedBars : generateStackedBars\n    const { bars, xScale, yScale } = generateBars({\n        layout,\n        reverse,\n        data,\n        getIndex,\n        keys,\n        minValue,\n        maxValue,\n        width,\n        height,\n        getColor,\n        padding,\n        innerPadding,\n        valueScale,\n        indexScale,\n        hiddenIds,\n        formatValue,\n        getTooltipLabel,\n        margin,\n    })\n\n    const barsWithValue = useMemo(\n        () =>\n            bars\n                .filter(\n                    (bar): bar is ComputedBarDatumWithValue<RawDatum> => bar.data.value !== null\n                )\n                .map((bar, index) => ({\n                    ...bar,\n                    index,\n                })),\n        [bars]\n    )\n\n    const shouldRenderBarLabel = useCallback(\n        ({ width, height }: { height: number; width: number }) => {\n            if (!enableLabel) return false\n            if (labelSkipWidth > 0 && width < labelSkipWidth) return false\n            if (labelSkipHeight > 0 && height < labelSkipHeight) return false\n            return true\n        },\n        [enableLabel, labelSkipWidth, labelSkipHeight]\n    )\n\n    const legendData = useMemo(\n        () =>\n            keys.map(key => {\n                const bar = bars.find(bar => bar.data.id === key)\n\n                return { ...bar, data: { id: key, ...bar?.data, hidden: hiddenIds.includes(key) } }\n            }),\n        [hiddenIds, keys, bars]\n    )\n\n    const legendsWithData: [BarLegendProps, LegendData[]][] = useMemo(\n        () =>\n            legends.map(legend => {\n                const data = getLegendData({\n                    bars: legend.dataFrom === 'keys' ? legendData : bars,\n                    direction: legend.direction,\n                    from: legend.dataFrom,\n                    groupMode,\n                    layout,\n                    legendLabel,\n                    reverse,\n                })\n\n                return [legend, data]\n            }),\n        [legends, legendData, bars, groupMode, layout, legendLabel, reverse]\n    )\n\n    return {\n        bars,\n        barsWithValue,\n        xScale,\n        yScale,\n        getIndex,\n        getLabel,\n        getTooltipLabel,\n        formatValue,\n        getColor,\n        getBorderColor,\n        getLabelColor,\n        shouldRenderBarLabel,\n        hiddenIds,\n        toggleSerie,\n        legendsWithData,\n    }\n}\n","import { Axes, Grid } from '@nivo/axes'\nimport { BarAnnotations } from './BarAnnotations'\nimport {\n    BarCustomLayerProps,\n    BarDatum,\n    BarLayer,\n    BarLayerId,\n    BarSvgProps,\n    ComputedBarDatumWithValue,\n} from './types'\nimport { BarLegends } from './BarLegends'\nimport {\n    CartesianMarkers,\n    Container,\n    SvgWrapper,\n    // @ts-ignore\n    bindDefs,\n    useDimensions,\n    useMotionConfig,\n} from '@nivo/core'\nimport { Fragment, ReactNode, createElement, useMemo } from 'react'\nimport { svgDefaultProps } from './props'\nimport { useTransition } from '@react-spring/web'\nimport { useBar } from './hooks'\n\ntype InnerBarProps<RawDatum extends BarDatum> = Omit<\n    BarSvgProps<RawDatum>,\n    'animate' | 'motionConfig' | 'renderWrapper' | 'theme'\n>\n\nconst InnerBar = <RawDatum extends BarDatum>({\n    data,\n    indexBy,\n    keys,\n\n    margin: partialMargin,\n    width,\n    height,\n\n    groupMode,\n    layout,\n    reverse,\n    minValue,\n    maxValue,\n\n    valueScale,\n    indexScale,\n\n    padding,\n    innerPadding,\n\n    axisTop,\n    axisRight,\n    axisBottom = svgDefaultProps.axisBottom,\n    axisLeft = svgDefaultProps.axisLeft,\n    enableGridX = svgDefaultProps.enableGridX,\n    enableGridY = svgDefaultProps.enableGridY,\n    gridXValues,\n    gridYValues,\n\n    layers = svgDefaultProps.layers as BarLayer<RawDatum>[],\n    barComponent = svgDefaultProps.barComponent,\n\n    enableLabel = svgDefaultProps.enableLabel,\n    label,\n    labelSkipWidth = svgDefaultProps.labelSkipWidth,\n    labelSkipHeight = svgDefaultProps.labelSkipHeight,\n    labelTextColor,\n\n    markers = svgDefaultProps.markers,\n\n    colorBy,\n    colors,\n    defs = svgDefaultProps.defs,\n    fill = svgDefaultProps.fill,\n    borderRadius = svgDefaultProps.borderRadius,\n    borderWidth = svgDefaultProps.borderWidth,\n    borderColor,\n\n    annotations = svgDefaultProps.annotations,\n\n    legendLabel,\n    tooltipLabel,\n\n    valueFormat,\n\n    isInteractive = svgDefaultProps.isInteractive,\n    tooltip = svgDefaultProps.tooltip,\n    onClick,\n    onMouseEnter,\n    onMouseLeave,\n\n    legends,\n\n    role = svgDefaultProps.role,\n    ariaLabel,\n    ariaLabelledBy,\n    ariaDescribedBy,\n    isFocusable = svgDefaultProps.isFocusable,\n    barAriaLabel,\n    barAriaLabelledBy,\n    barAriaDescribedBy,\n\n    initialHiddenIds,\n}: InnerBarProps<RawDatum>) => {\n    const { animate, config: springConfig } = useMotionConfig()\n    const { outerWidth, outerHeight, margin, innerWidth, innerHeight } = useDimensions(\n        width,\n        height,\n        partialMargin\n    )\n\n    const {\n        bars,\n        barsWithValue,\n        xScale,\n        yScale,\n        getLabel,\n        getTooltipLabel,\n        getBorderColor,\n        getLabelColor,\n        shouldRenderBarLabel,\n        toggleSerie,\n        legendsWithData,\n    } = useBar<RawDatum>({\n        indexBy,\n        label,\n        tooltipLabel,\n        valueFormat,\n        colors,\n        colorBy,\n        borderColor,\n        labelTextColor,\n        groupMode,\n        layout,\n        reverse,\n        data,\n        keys,\n        minValue,\n        maxValue,\n        margin,\n        width: innerWidth,\n        height: innerHeight,\n        padding,\n        innerPadding,\n        valueScale,\n        indexScale,\n        enableLabel,\n        labelSkipWidth,\n        labelSkipHeight,\n        legends,\n        legendLabel,\n        initialHiddenIds,\n    })\n\n    const transition = useTransition<\n        ComputedBarDatumWithValue<RawDatum>,\n        {\n            borderColor: string\n            color: string\n            height: number\n            labelColor: string\n            labelOpacity: number\n            labelX: number\n            labelY: number\n            opacity: number\n            transform: string\n            width: number\n        }\n    >(barsWithValue, {\n        keys: bar => bar.key,\n        from: bar => ({\n            borderColor: getBorderColor(bar) as string,\n            color: bar.color,\n            height: 0,\n            labelColor: getLabelColor(bar) as string,\n            labelOpacity: 0,\n            labelX: bar.width / 2,\n            labelY: bar.height / 2,\n            transform: `translate(${bar.x}, ${bar.y + bar.height})`,\n            width: bar.width,\n            ...(layout === 'vertical'\n                ? {}\n                : {\n                      height: bar.height,\n                      transform: `translate(${bar.x}, ${bar.y})`,\n                      width: 0,\n                  }),\n        }),\n        enter: bar => ({\n            borderColor: getBorderColor(bar) as string,\n            color: bar.color,\n            height: bar.height,\n            labelColor: getLabelColor(bar) as string,\n            labelOpacity: 1,\n            labelX: bar.width / 2,\n            labelY: bar.height / 2,\n            transform: `translate(${bar.x}, ${bar.y})`,\n            width: bar.width,\n        }),\n        update: bar => ({\n            borderColor: getBorderColor(bar) as string,\n            color: bar.color,\n            height: bar.height,\n            labelColor: getLabelColor(bar) as string,\n            labelOpacity: 1,\n            labelX: bar.width / 2,\n            labelY: bar.height / 2,\n            transform: `translate(${bar.x}, ${bar.y})`,\n            width: bar.width,\n        }),\n        leave: bar => ({\n            borderColor: getBorderColor(bar) as string,\n            color: bar.color,\n            height: 0,\n            labelColor: getLabelColor(bar) as string,\n            labelOpacity: 0,\n            labelX: bar.width / 2,\n            labelY: 0,\n            transform: `translate(${bar.x}, ${bar.y + bar.height})`,\n            width: bar.width,\n            ...(layout === 'vertical'\n                ? {}\n                : {\n                      labelX: 0,\n                      labelY: bar.height / 2,\n                      height: bar.height,\n                      transform: `translate(${bar.x}, ${bar.y})`,\n                      width: 0,\n                  }),\n        }),\n        config: springConfig,\n        immediate: !animate,\n    })\n\n    const commonProps = useMemo(\n        () => ({\n            borderRadius,\n            borderWidth,\n            enableLabel,\n            isInteractive,\n            labelSkipWidth,\n            labelSkipHeight,\n            onClick,\n            onMouseEnter,\n            onMouseLeave,\n            getTooltipLabel,\n            tooltip,\n            isFocusable,\n            ariaLabel: barAriaLabel,\n            ariaLabelledBy: barAriaLabelledBy,\n            ariaDescribedBy: barAriaDescribedBy,\n        }),\n        [\n            borderRadius,\n            borderWidth,\n            enableLabel,\n            getTooltipLabel,\n            isInteractive,\n            labelSkipHeight,\n            labelSkipWidth,\n            onClick,\n            onMouseEnter,\n            onMouseLeave,\n            tooltip,\n            isFocusable,\n            barAriaLabel,\n            barAriaLabelledBy,\n            barAriaDescribedBy,\n        ]\n    )\n\n    const boundDefs = bindDefs(defs, bars, fill, {\n        dataKey: 'data',\n        targetKey: 'data.fill',\n    })\n\n    const layerById: Record<BarLayerId, ReactNode> = {\n        annotations: null,\n        axes: null,\n        bars: null,\n        grid: null,\n        legends: null,\n        markers: null,\n    }\n\n    if (layers.includes('annotations')) {\n        layerById.annotations = (\n            <BarAnnotations key=\"annotations\" bars={bars} annotations={annotations} />\n        )\n    }\n\n    if (layers.includes('axes')) {\n        layerById.axes = (\n            <Axes\n                key=\"axes\"\n                xScale={xScale}\n                yScale={yScale}\n                width={innerWidth}\n                height={innerHeight}\n                top={axisTop}\n                right={axisRight}\n                bottom={axisBottom}\n                left={axisLeft}\n            />\n        )\n    }\n\n    if (layers.includes('bars')) {\n        layerById.bars = (\n            <Fragment key=\"bars\">\n                {transition((style, bar) =>\n                    createElement(barComponent, {\n                        ...commonProps,\n                        bar,\n                        style,\n                        shouldRenderLabel: shouldRenderBarLabel(bar),\n                        label: getLabel(bar.data),\n                    })\n                )}\n            </Fragment>\n        )\n    }\n\n    if (layers.includes('grid')) {\n        layerById.grid = (\n            <Grid\n                key=\"grid\"\n                width={innerWidth}\n                height={innerHeight}\n                xScale={enableGridX ? xScale : null}\n                yScale={enableGridY ? yScale : null}\n                xValues={gridXValues}\n                yValues={gridYValues}\n            />\n        )\n    }\n\n    if (layers.includes('legends')) {\n        layerById.legends = (\n            <BarLegends\n                key=\"legends\"\n                width={innerWidth}\n                height={innerHeight}\n                legends={legendsWithData}\n                toggleSerie={toggleSerie}\n            />\n        )\n    }\n\n    if (layers.includes('markers')) {\n        layerById.markers = (\n            <CartesianMarkers<number | string, number>\n                key=\"markers\"\n                markers={markers as any[]}\n                width={innerWidth}\n                height={innerHeight}\n                xScale={xScale as (v: number | string) => number}\n                yScale={yScale as (v: number) => number}\n            />\n        )\n    }\n\n    const layerContext: BarCustomLayerProps<RawDatum> = useMemo(\n        () => ({\n            ...commonProps,\n            margin,\n            width,\n            height,\n            innerWidth,\n            innerHeight,\n            bars,\n            legendData: legendsWithData,\n            enableLabel,\n            xScale,\n            yScale,\n            tooltip,\n            getTooltipLabel,\n            onClick,\n            onMouseEnter,\n            onMouseLeave,\n        }),\n        [\n            commonProps,\n            margin,\n            width,\n            height,\n            innerWidth,\n            innerHeight,\n            bars,\n            legendsWithData,\n            enableLabel,\n            xScale,\n            yScale,\n            tooltip,\n            getTooltipLabel,\n            onClick,\n            onMouseEnter,\n            onMouseLeave,\n        ]\n    )\n\n    return (\n        <SvgWrapper\n            width={outerWidth}\n            height={outerHeight}\n            margin={margin}\n            defs={boundDefs}\n            role={role}\n            ariaLabel={ariaLabel}\n            ariaLabelledBy={ariaLabelledBy}\n            ariaDescribedBy={ariaDescribedBy}\n            isFocusable={isFocusable}\n        >\n            {layers.map((layer, i) => {\n                if (typeof layer === 'function') {\n                    return <Fragment key={i}>{createElement(layer, layerContext)}</Fragment>\n                }\n\n                return layerById?.[layer] ?? null\n            })}\n        </SvgWrapper>\n    )\n}\n\nexport const Bar = <RawDatum extends BarDatum>({\n    isInteractive = svgDefaultProps.isInteractive,\n    animate = svgDefaultProps.animate,\n    motionConfig = svgDefaultProps.motionConfig,\n    theme,\n    renderWrapper,\n    ...otherProps\n}: BarSvgProps<RawDatum>) => (\n    <Container\n        {...{\n            animate,\n            isInteractive,\n            motionConfig,\n            renderWrapper,\n            theme,\n        }}\n    >\n        <InnerBar<RawDatum> isInteractive={isInteractive} {...otherProps} />\n    </Container>\n)\n","import {\n    BarCanvasCustomLayerProps,\n    BarCanvasLayer,\n    BarCanvasProps,\n    BarDatum,\n    ComputedBarDatum,\n} from './types'\nimport {\n    Container,\n    Margin,\n    getRelativeCursor,\n    isCursorInRect,\n    useDimensions,\n    useTheme,\n} from '@nivo/core'\nimport {\n    ForwardedRef,\n    createElement,\n    forwardRef,\n    useCallback,\n    useEffect,\n    useMemo,\n    useRef,\n} from 'react'\nimport { canvasDefaultProps } from './props'\nimport {\n    renderAnnotationsToCanvas,\n    useAnnotations,\n    useComputedAnnotations,\n} from '@nivo/annotations'\nimport { renderAxesToCanvas, renderGridLinesToCanvas } from '@nivo/axes'\nimport { renderLegendToCanvas } from '@nivo/legends'\nimport { useTooltip } from '@nivo/tooltip'\nimport { useBar } from './hooks'\n\ntype InnerBarCanvasProps<RawDatum extends BarDatum> = Omit<\n    BarCanvasProps<RawDatum>,\n    'renderWrapper' | 'theme'\n> & {\n    canvasRef: ForwardedRef<HTMLCanvasElement>\n}\n\nconst findBarUnderCursor = <RawDatum,>(\n    nodes: ComputedBarDatum<RawDatum>[],\n    margin: Margin,\n    x: number,\n    y: number\n) =>\n    nodes.find(node =>\n        isCursorInRect(node.x + margin.left, node.y + margin.top, node.width, node.height, x, y)\n    )\n\nconst isNumber = (value: unknown): value is number => typeof value === 'number'\n\nconst InnerBarCanvas = <RawDatum extends BarDatum>({\n    data,\n    indexBy,\n    keys,\n\n    margin: partialMargin,\n    width,\n    height,\n\n    groupMode,\n    layout,\n    reverse,\n    minValue,\n    maxValue,\n\n    valueScale,\n    indexScale,\n\n    padding,\n    innerPadding,\n\n    axisTop,\n    axisRight,\n    axisBottom = canvasDefaultProps.axisBottom,\n    axisLeft = canvasDefaultProps.axisLeft,\n    enableGridX = canvasDefaultProps.enableGridX,\n    enableGridY = canvasDefaultProps.enableGridY,\n    gridXValues,\n    gridYValues,\n\n    layers = canvasDefaultProps.layers as BarCanvasLayer<RawDatum>[],\n    renderBar = (\n        ctx,\n        {\n            bar: { color, height, width, x, y },\n\n            borderColor,\n            borderRadius,\n            borderWidth,\n            label,\n            labelColor,\n            shouldRenderLabel,\n        }\n    ) => {\n        ctx.fillStyle = color\n\n        if (borderWidth > 0) {\n            ctx.strokeStyle = borderColor\n            ctx.lineWidth = borderWidth\n        }\n\n        ctx.beginPath()\n\n        if (borderRadius > 0) {\n            const radius = Math.min(borderRadius, height)\n\n            ctx.moveTo(x + radius, y)\n            ctx.lineTo(x + width - radius, y)\n            ctx.quadraticCurveTo(x + width, y, x + width, y + radius)\n            ctx.lineTo(x + width, y + height - radius)\n            ctx.quadraticCurveTo(x + width, y + height, x + width - radius, y + height)\n            ctx.lineTo(x + radius, y + height)\n            ctx.quadraticCurveTo(x, y + height, x, y + height - radius)\n            ctx.lineTo(x, y + radius)\n            ctx.quadraticCurveTo(x, y, x + radius, y)\n            ctx.closePath()\n        } else {\n            ctx.rect(x, y, width, height)\n        }\n\n        ctx.fill()\n\n        if (borderWidth > 0) {\n            ctx.stroke()\n        }\n\n        if (shouldRenderLabel) {\n            ctx.textBaseline = 'middle'\n            ctx.textAlign = 'center'\n            ctx.fillStyle = labelColor\n            ctx.fillText(label, x + width / 2, y + height / 2)\n        }\n    },\n\n    enableLabel = canvasDefaultProps.enableLabel,\n    label,\n    labelSkipWidth = canvasDefaultProps.labelSkipWidth,\n    labelSkipHeight = canvasDefaultProps.labelSkipHeight,\n    labelTextColor,\n\n    colorBy,\n    colors,\n    borderRadius = canvasDefaultProps.borderRadius,\n    borderWidth = canvasDefaultProps.borderWidth,\n    borderColor,\n\n    annotations = canvasDefaultProps.annotations,\n\n    legendLabel,\n    tooltipLabel,\n\n    valueFormat,\n\n    isInteractive = canvasDefaultProps.isInteractive,\n    tooltip = canvasDefaultProps.tooltip,\n    onClick,\n    onMouseEnter,\n    onMouseLeave,\n\n    legends,\n\n    pixelRatio = canvasDefaultProps.pixelRatio,\n\n    canvasRef,\n}: InnerBarCanvasProps<RawDatum>) => {\n    const canvasEl = useRef<HTMLCanvasElement | null>(null)\n\n    const theme = useTheme()\n    const { margin, innerWidth, innerHeight, outerWidth, outerHeight } = useDimensions(\n        width,\n        height,\n        partialMargin\n    )\n\n    const {\n        bars,\n        barsWithValue,\n        xScale,\n        yScale,\n        getLabel,\n        getTooltipLabel,\n        getBorderColor,\n        getLabelColor,\n        shouldRenderBarLabel,\n        legendsWithData,\n    } = useBar<RawDatum>({\n        indexBy,\n        label,\n        tooltipLabel,\n        valueFormat,\n        colors,\n        colorBy,\n        borderColor,\n        labelTextColor,\n        groupMode,\n        layout,\n        reverse,\n        data,\n        keys,\n        minValue,\n        maxValue,\n        margin,\n        width: innerWidth,\n        height: innerHeight,\n        padding,\n        innerPadding,\n        valueScale,\n        indexScale,\n        enableLabel,\n        labelSkipWidth,\n        labelSkipHeight,\n        legends,\n        legendLabel,\n    })\n\n    const { showTooltipFromEvent, hideTooltip } = useTooltip()\n\n    // Using any because return type isn't correct\n    const boundAnnotations: any = useComputedAnnotations({\n        annotations: useAnnotations({\n            data: bars,\n            annotations,\n            getPosition: node => ({\n                x: node.x,\n                y: node.y,\n            }),\n            getDimensions: ({ width, height }) => ({\n                width,\n                height,\n                size: Math.max(width, height),\n            }),\n        }),\n    })\n\n    // We use `any` here until we can figure out the best way to type xScale/yScale\n    const layerContext: BarCanvasCustomLayerProps<RawDatum> = useMemo(\n        () => ({\n            borderRadius,\n            borderWidth,\n            isInteractive,\n            isFocusable: false,\n            labelSkipWidth,\n            labelSkipHeight,\n            margin,\n            width,\n            height,\n            innerWidth,\n            innerHeight,\n            bars,\n            legendData: legendsWithData,\n            enableLabel,\n            xScale,\n            yScale,\n            tooltip,\n            getTooltipLabel,\n            onClick,\n            onMouseEnter,\n            onMouseLeave,\n        }),\n        [\n            borderRadius,\n            borderWidth,\n            isInteractive,\n            labelSkipWidth,\n            labelSkipHeight,\n            margin,\n            width,\n            height,\n            innerWidth,\n            innerHeight,\n            bars,\n            legendsWithData,\n            enableLabel,\n            xScale,\n            yScale,\n            tooltip,\n            getTooltipLabel,\n            onClick,\n            onMouseEnter,\n            onMouseLeave,\n        ]\n    )\n\n    useEffect(() => {\n        const ctx = canvasEl.current?.getContext('2d')\n\n        if (!canvasEl.current) return\n        if (!ctx) return\n\n        canvasEl.current.width = outerWidth * pixelRatio\n        canvasEl.current.height = outerHeight * pixelRatio\n\n        ctx.scale(pixelRatio, pixelRatio)\n\n        ctx.fillStyle = theme.background\n        ctx.fillRect(0, 0, outerWidth, outerHeight)\n        ctx.translate(margin.left, margin.top)\n\n        layers.forEach(layer => {\n            if (layer === 'grid') {\n                if (isNumber(theme.grid.line.strokeWidth) && theme.grid.line.strokeWidth > 0) {\n                    ctx.lineWidth = theme.grid.line.strokeWidth\n                    ctx.strokeStyle = theme.grid.line.stroke as string\n\n                    if (enableGridX) {\n                        renderGridLinesToCanvas<string | number>(ctx, {\n                            width,\n                            height,\n                            scale: xScale,\n                            axis: 'x',\n                            values: gridXValues,\n                        })\n                    }\n\n                    if (enableGridY) {\n                        renderGridLinesToCanvas<string | number>(ctx, {\n                            width,\n                            height,\n                            scale: yScale,\n                            axis: 'y',\n                            values: gridYValues,\n                        })\n                    }\n                }\n            } else if (layer === 'axes') {\n                renderAxesToCanvas(ctx, {\n                    xScale: xScale,\n                    yScale: yScale,\n                    width: innerWidth,\n                    height: innerHeight,\n                    top: axisTop,\n                    right: axisRight,\n                    bottom: axisBottom,\n                    left: axisLeft,\n                    theme,\n                })\n            } else if (layer === 'bars') {\n                barsWithValue.forEach(bar => {\n                    renderBar(ctx, {\n                        bar,\n                        borderColor: getBorderColor(bar) as string,\n                        borderRadius,\n                        borderWidth,\n                        label: getLabel(bar.data),\n                        labelColor: getLabelColor(bar) as string,\n                        shouldRenderLabel: shouldRenderBarLabel(bar),\n                    })\n                })\n            } else if (layer === 'legends') {\n                legendsWithData.forEach(([legend, data]) => {\n                    renderLegendToCanvas(ctx, {\n                        ...legend,\n                        data,\n                        containerWidth: innerWidth,\n                        containerHeight: innerHeight,\n                        theme,\n                    })\n                })\n            } else if (layer === 'annotations') {\n                renderAnnotationsToCanvas(ctx, { annotations: boundAnnotations, theme })\n            } else if (typeof layer === 'function') {\n                layer(ctx, layerContext)\n            }\n        })\n\n        ctx.save()\n    }, [\n        axisBottom,\n        axisLeft,\n        axisRight,\n        axisTop,\n        barsWithValue,\n        borderRadius,\n        borderWidth,\n        boundAnnotations,\n        enableGridX,\n        enableGridY,\n        getBorderColor,\n        getLabel,\n        getLabelColor,\n        gridXValues,\n        gridYValues,\n        groupMode,\n        height,\n        innerHeight,\n        innerWidth,\n        layerContext,\n        layers,\n        layout,\n        legendsWithData,\n        margin.left,\n        margin.top,\n        outerHeight,\n        outerWidth,\n        pixelRatio,\n        renderBar,\n        xScale,\n        yScale,\n        reverse,\n        shouldRenderBarLabel,\n        theme,\n        width,\n    ])\n\n    const handleMouseHover = useCallback(\n        (event: React.MouseEvent<HTMLCanvasElement>) => {\n            if (!bars) return\n            if (!canvasEl.current) return\n\n            const [x, y] = getRelativeCursor(canvasEl.current, event)\n            const bar = findBarUnderCursor(bars, margin, x, y)\n\n            if (bar !== undefined) {\n                showTooltipFromEvent(\n                    createElement(tooltip, {\n                        ...bar.data,\n                        color: bar.color,\n                        label: bar.label,\n                        value: Number(bar.data.value),\n                    }),\n                    event\n                )\n\n                if (event.type === 'mouseenter') {\n                    onMouseEnter?.(bar.data, event)\n                }\n            } else {\n                hideTooltip()\n            }\n        },\n        [hideTooltip, margin, onMouseEnter, bars, showTooltipFromEvent, tooltip]\n    )\n\n    const handleMouseLeave = useCallback(\n        (event: React.MouseEvent<HTMLCanvasElement>) => {\n            if (!bars) return\n            if (!canvasEl.current) return\n\n            hideTooltip()\n\n            const [x, y] = getRelativeCursor(canvasEl.current, event)\n            const bar = findBarUnderCursor(bars, margin, x, y)\n\n            if (bar) {\n                onMouseLeave?.(bar.data, event)\n            }\n        },\n        [hideTooltip, margin, onMouseLeave, bars]\n    )\n\n    const handleClick = useCallback(\n        (event: React.MouseEvent<HTMLCanvasElement>) => {\n            if (!bars) return\n            if (!canvasEl.current) return\n\n            const [x, y] = getRelativeCursor(canvasEl.current, event)\n            const bar = findBarUnderCursor(bars, margin, x, y)\n\n            if (bar !== undefined) {\n                onClick?.({ ...bar.data, color: bar.color }, event)\n            }\n        },\n        [margin, onClick, bars]\n    )\n\n    return (\n        <canvas\n            ref={canvas => {\n                canvasEl.current = canvas\n                if (canvasRef && 'current' in canvasRef) canvasRef.current = canvas\n            }}\n            width={outerWidth * pixelRatio}\n            height={outerHeight * pixelRatio}\n            style={{\n                width: outerWidth,\n                height: outerHeight,\n                cursor: isInteractive ? 'auto' : 'normal',\n            }}\n            onMouseEnter={isInteractive ? handleMouseHover : undefined}\n            onMouseMove={isInteractive ? handleMouseHover : undefined}\n            onMouseLeave={isInteractive ? handleMouseLeave : undefined}\n            onClick={isInteractive ? handleClick : undefined}\n        />\n    )\n}\n\nexport const BarCanvas = forwardRef(\n    <RawDatum extends BarDatum>(\n        { isInteractive, renderWrapper, theme, ...props }: BarCanvasProps<RawDatum>,\n        ref: ForwardedRef<HTMLCanvasElement>\n    ) => (\n        <Container {...{ isInteractive, renderWrapper, theme }} animate={false}>\n            <InnerBarCanvas<RawDatum> {...props} canvasRef={ref} />\n        </Container>\n    )\n)\n","import { Bar } from './Bar'\nimport { BarDatum, BarSvgProps } from './types'\nimport { ResponsiveWrapper } from '@nivo/core'\n\nexport const ResponsiveBar = <RawDatum extends BarDatum>(\n    props: Omit<BarSvgProps<RawDatum>, 'height' | 'width'>\n) => (\n    <ResponsiveWrapper>\n        {({ width, height }) => <Bar<RawDatum> width={width} height={height} {...props} />}\n    </ResponsiveWrapper>\n)\n","import { BarDatum, BarCanvasProps } from './types'\nimport { BarCanvas } from './BarCanvas'\nimport { ForwardedRef, forwardRef } from 'react'\nimport { ResponsiveWrapper } from '@nivo/core'\n\nexport const ResponsiveBarCanvas = forwardRef(function ResponsiveBarCanvas<\n    RawDatum extends BarDatum\n>(props: Omit<BarCanvasProps<RawDatum>, 'height' | 'width'>, ref: ForwardedRef<HTMLCanvasElement>) {\n    return (\n        <ResponsiveWrapper>\n            {({ width, height }) => (\n                <BarCanvas\n                    width={width}\n                    height={height}\n                    {...(props as Omit<BarCanvasProps<BarDatum>, 'height' | 'width'>)}\n                    ref={ref}\n                />\n            )}\n        </ResponsiveWrapper>\n    )\n})\n"],"names":["BarAnnotations","bars","annotations","boundAnnotations","useAnnotations","data","getPosition","bar","x","width","y","height","getDimensions","size","Math","max","_jsx","map","annotation","i","Annotation","BarLegends","legends","toggleSerie","legend","BoxLegendSvg","containerWidth","containerHeight","dataFrom","undefined","BarItem","style","borderColor","color","labelColor","labelOpacity","labelX","labelY","transform","borderRadius","borderWidth","label","shouldRenderLabel","isInteractive","onClick","onMouseEnter","onMouseLeave","tooltip","isFocusable","ariaLabel","ariaLabelledBy","ariaDescribedBy","theme","useTheme","useTooltip","showTooltipFromEvent","showTooltipAt","hideTooltip","renderTooltip","useMemo","createElement","handleClick","useCallback","event","handleTooltip","handleMouseEnter","handleMouseLeave","handleFocus","absX","absY","handleBlur","_jsxs","animated","g","rect","to","value","rx","ry","fill","strokeWidth","stroke","focusable","tabIndex","onMouseMove","onFocus","onBlur","text","textAnchor","dominantBaseline","fillOpacity","labels","pointerEvents","defaultProps","indexBy","keys","groupMode","layout","reverse","minValue","maxValue","valueScale","type","indexScale","round","padding","innerPadding","axisBottom","axisLeft","enableGridX","enableGridY","enableLabel","labelSkipWidth","labelSkipHeight","labelTextColor","from","colorBy","colors","scheme","BasicTooltip","id","formattedValue","enableChip","tooltipLabel","datum","indexValue","initialHiddenIds","markers","svgDefaultProps","layers","barComponent","defs","animate","motionConfig","role","canvasDefaultProps","pixelRatio","window","devicePixelRatio","getIndexScale","getIndex","axis","computeScale","all","min","normalizeData","item","reduce","acc","key","filterNullValues","Object","coerceValue","Number","gt","other","lt","range","start","end","Array","repeat","_","index","clampToZero","generateVerticalGroupedBars","barWidth","yRef","formatValue","getColor","getTooltipLabel","xScale","yScale","margin","compare","cleanedData","forEach","domain","length","d","rawValue","barHeight","getHeight","barData","hidden","push","left","top","generateHorizontalGroupedBars","xRef","getWidth","generateGroupedBars","indexScaleConfig","hiddenIds","props","filter","includes","otherAxis","scaleSpec","clampMin","values","entry","k","Boolean","isFinite","scale","bandwidth","params","flattenDeep","arr","some","isArray","concat","generateVerticalStackedBars","stackedData","stackedDataItem","getY","generateHorizontalStackedBars","getX","generateStackedBars","array","stack","offset","stackOffsetDiverging","num","getLegendData","direction","legendLabel","getLegendLabel","getPropertyAccessor","_uniqBy","getLegendDataForIndexes","getLegendDataForKeys","useBar","valueFormat","useState","setHiddenIds","state","indexOf","usePropertyAccessor","getLabel","useValueFormatter","useOrdinalColorScale","getBorderColor","useInheritedColor","getLabelColor","barsWithValue","shouldRenderBarLabel","legendData","find","legendsWithData","InnerBar","partialMargin","axisTop","axisRight","gridXValues","gridYValues","barAriaLabel","barAriaLabelledBy","barAriaDescribedBy","useMotionConfig","springConfig","config","useDimensions","outerWidth","outerHeight","innerWidth","innerHeight","transition","useTransition","enter","update","leave","immediate","commonProps","boundDefs","bindDefs","dataKey","targetKey","layerById","axes","grid","Axes","right","bottom","Fragment","Grid","xValues","yValues","CartesianMarkers","layerContext","SvgWrapper","layer","Bar","renderWrapper","otherProps","Container","findBarUnderCursor","nodes","node","isCursorInRect","InnerBarCanvas","renderBar","ctx","fillStyle","strokeStyle","lineWidth","beginPath","radius","moveTo","lineTo","quadraticCurveTo","closePath","textBaseline","textAlign","fillText","canvasRef","canvasEl","useRef","useComputedAnnotations","useEffect","current","_canvasEl$current","getContext","background","fillRect","translate","line","renderGridLinesToCanvas","renderAxesToCanvas","renderLegendToCanvas","renderAnnotationsToCanvas","save","handleMouseHover","getRelativeCursor","ref","canvas","cursor","BarCanvas","forwardRef","ResponsiveBar","ResponsiveWrapper","ResponsiveBarCanvas"],"mappings":"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"}