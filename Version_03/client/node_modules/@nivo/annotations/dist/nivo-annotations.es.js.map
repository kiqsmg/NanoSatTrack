{"version":3,"file":"nivo-annotations.es.js","sources":["../src/props.ts","../src/utils.ts","../src/compute.ts","../src/hooks.ts","../src/AnnotationNote.tsx","../src/AnnotationLink.tsx","../src/CircleAnnotationOutline.tsx","../src/DotAnnotationOutline.tsx","../src/RectAnnotationOutline.tsx","../src/Annotation.tsx","../src/canvas.ts"],"sourcesContent":["export const defaultProps = {\n    dotSize: 4,\n    noteWidth: 120,\n    noteTextOffset: 8,\n    animate: true,\n    motionStiffness: 90,\n    motionDamping: 13,\n}\n","import {\n    AnnotationSpec,\n    CircleAnnotationSpec,\n    DotAnnotationSpec,\n    Note,\n    NoteCanvas,\n    NoteSvg,\n    RectAnnotationSpec,\n} from './types'\nimport { isValidElement } from 'react'\n\nexport const isSvgNote = <Datum>(note: Note<Datum>): note is NoteSvg<Datum> => {\n    const noteType = typeof note\n\n    return (\n        isValidElement(note) ||\n        noteType === 'string' ||\n        noteType === 'function' ||\n        noteType === 'object'\n    )\n}\n\nexport const isCanvasNote = <Datum>(note: Note<Datum>): note is NoteCanvas<Datum> => {\n    const noteType = typeof note\n\n    return noteType === 'string' || noteType === 'function'\n}\n\nexport const isCircleAnnotation = <Datum>(\n    annotationSpec: AnnotationSpec<Datum>\n): annotationSpec is CircleAnnotationSpec<Datum> => annotationSpec.type === 'circle'\n\nexport const isDotAnnotation = <Datum>(\n    annotationSpec: AnnotationSpec<Datum>\n): annotationSpec is DotAnnotationSpec<Datum> => annotationSpec.type === 'dot'\n\nexport const isRectAnnotation = <Datum>(\n    annotationSpec: AnnotationSpec<Datum>\n): annotationSpec is RectAnnotationSpec<Datum> => annotationSpec.type === 'rect'\n","import { filter, isNumber, omit } from 'lodash'\nimport {\n    radiansToDegrees,\n    absoluteAngleDegrees,\n    degreesToRadians,\n    positionFromAngle,\n} from '@nivo/core'\nimport { defaultProps } from './props'\nimport {\n    AnnotationPositionGetter,\n    AnnotationDimensionsGetter,\n    BoundAnnotation,\n    AnnotationMatcher,\n    AnnotationInstructions,\n} from './types'\nimport { isCircleAnnotation, isRectAnnotation } from './utils'\n\nexport const bindAnnotations = <\n    Datum = {\n        x: number\n        y: number\n    }\n>({\n    data,\n    annotations,\n    getPosition,\n    getDimensions,\n}: {\n    data: Datum[]\n    annotations: AnnotationMatcher<Datum>[]\n    getPosition: AnnotationPositionGetter<Datum>\n    getDimensions: AnnotationDimensionsGetter<Datum>\n}): BoundAnnotation<Datum>[] =>\n    annotations.reduce((acc: BoundAnnotation<Datum>[], annotation) => {\n        const offset = annotation.offset || 0\n\n        return [\n            ...acc,\n            ...filter<Datum>(data, annotation.match).map(datum => {\n                const position = getPosition(datum)\n                const dimensions = getDimensions(datum)\n\n                if (isCircleAnnotation(annotation) || isRectAnnotation(annotation)) {\n                    dimensions.size = dimensions.size + offset * 2\n                    dimensions.width = dimensions.width + offset * 2\n                    dimensions.height = dimensions.height + offset * 2\n                }\n\n                // acc.push({\n                //     ...omit(annotation, ['match', 'offset']),\n                //     ...position,\n                //     ...dimensions,\n                //     size: annotation.size || dimensions.size,\n                //     datum,\n                // } as any)\n                // return [\n                //     ...acc,\n                //     {\n                //         ...omit(annotation, ['match', 'offset']),\n                //         ...position,\n                //         ...dimensions,\n                //         size: annotation.size || dimensions.size,\n                //         datum,\n                //     },\n                // ]\n                return {\n                    ...omit(annotation, ['match', 'offset']),\n                    ...position,\n                    ...dimensions,\n                    size: annotation.size || dimensions.size,\n                    datum,\n                } as Required<BoundAnnotation<Datum>>\n            }),\n        ]\n\n        // return acc\n    }, [])\n\nexport const getLinkAngle = (\n    sourceX: number,\n    sourceY: number,\n    targetX: number,\n    targetY: number\n) => {\n    const angle = Math.atan2(targetY - sourceY, targetX - sourceX)\n\n    return absoluteAngleDegrees(radiansToDegrees(angle))\n}\n\nexport const computeAnnotation = <Datum>(\n    annotation: BoundAnnotation<Datum>\n): AnnotationInstructions => {\n    const {\n        x,\n        y,\n        noteX,\n        noteY,\n        noteWidth = defaultProps.noteWidth,\n        noteTextOffset = defaultProps.noteTextOffset,\n    } = annotation\n\n    let computedNoteX: number\n    let computedNoteY: number\n\n    if (isNumber(noteX)) {\n        computedNoteX = x + noteX\n    } else if (noteX.abs !== undefined) {\n        computedNoteX = noteX.abs\n    } else {\n        throw new Error(`noteX should be either a number or an object containing an 'abs' property`)\n    }\n\n    if (isNumber(noteY)) {\n        computedNoteY = y + noteY\n    } else if (noteY.abs !== undefined) {\n        computedNoteY = noteY.abs\n    } else {\n        throw new Error(`noteY should be either a number or an object containing an 'abs' property`)\n    }\n\n    let computedX = x\n    let computedY = y\n\n    const angle = getLinkAngle(x, y, computedNoteX, computedNoteY)\n\n    if (isCircleAnnotation<Datum>(annotation)) {\n        const position = positionFromAngle(degreesToRadians(angle), annotation.size / 2)\n        computedX += position.x\n        computedY += position.y\n    }\n\n    if (isRectAnnotation<Datum>(annotation)) {\n        const eighth = Math.round((angle + 90) / 45) % 8\n        if (eighth === 0) {\n            computedY -= annotation.height / 2\n        }\n        if (eighth === 1) {\n            computedX += annotation.width / 2\n            computedY -= annotation.height / 2\n        }\n        if (eighth === 2) {\n            computedX += annotation.width / 2\n        }\n        if (eighth === 3) {\n            computedX += annotation.width / 2\n            computedY += annotation.height / 2\n        }\n        if (eighth === 4) {\n            computedY += annotation.height / 2\n        }\n        if (eighth === 5) {\n            computedX -= annotation.width / 2\n            computedY += annotation.height / 2\n        }\n        if (eighth === 6) {\n            computedX -= annotation.width / 2\n        }\n        if (eighth === 7) {\n            computedX -= annotation.width / 2\n            computedY -= annotation.height / 2\n        }\n    }\n\n    let textX = computedNoteX\n    const textY = computedNoteY - noteTextOffset\n\n    let noteLineX = computedNoteX\n    const noteLineY = computedNoteY\n\n    if ((angle + 90) % 360 > 180) {\n        textX -= noteWidth\n        noteLineX -= noteWidth\n    } else {\n        noteLineX += noteWidth\n    }\n\n    return {\n        points: [\n            [computedX, computedY],\n            [computedNoteX, computedNoteY],\n            [noteLineX, noteLineY],\n        ] as [number, number][],\n        text: [textX, textY],\n        angle: angle + 90,\n    }\n}\n","import { useMemo } from 'react'\nimport { bindAnnotations, computeAnnotation } from './compute'\nimport {\n    AnnotationDimensionsGetter,\n    AnnotationMatcher,\n    AnnotationPositionGetter,\n    BoundAnnotation,\n} from './types'\n\n/**\n * Bind annotations to a dataset.\n */\nexport const useAnnotations = <Datum>({\n    data,\n    annotations,\n    getPosition,\n    getDimensions,\n}: {\n    data: Datum[]\n    annotations: AnnotationMatcher<Datum>[]\n    getPosition: AnnotationPositionGetter<Datum>\n    getDimensions: AnnotationDimensionsGetter<Datum>\n}) =>\n    useMemo(\n        () =>\n            bindAnnotations<Datum>({\n                data,\n                annotations,\n                getPosition,\n                getDimensions,\n            }),\n        [data, annotations, getPosition, getDimensions]\n    )\n\nexport const useComputedAnnotations = <Datum>({\n    annotations,\n}: {\n    annotations: BoundAnnotation<Datum>[]\n}) =>\n    useMemo(\n        () =>\n            annotations.map(annotation => ({\n                ...annotation,\n                computed: computeAnnotation<Datum>({\n                    ...annotation,\n                }),\n            })),\n        [annotations]\n    )\n\nexport const useComputedAnnotation = <Datum>(annotation: BoundAnnotation<Datum>) =>\n    useMemo(() => computeAnnotation<Datum>(annotation), [annotation])\n","import { createElement } from 'react'\nimport omit from 'lodash/omit'\nimport { useSpring, animated } from '@react-spring/web'\nimport { useTheme, useMotionConfig } from '@nivo/core'\nimport { NoteSvg } from './types'\n\nexport const AnnotationNote = <Datum,>({\n    datum,\n    x,\n    y,\n    note,\n}: {\n    datum: Datum\n    x: number\n    y: number\n    note: NoteSvg<Datum>\n}) => {\n    const theme = useTheme()\n    const { animate, config: springConfig } = useMotionConfig()\n\n    const animatedProps = useSpring({\n        x,\n        y,\n        config: springConfig,\n        immediate: !animate,\n    })\n\n    if (typeof note === 'function') {\n        return createElement(note, { x, y, datum })\n    }\n\n    return (\n        <>\n            {theme.annotations.text.outlineWidth > 0 && (\n                <animated.text\n                    x={animatedProps.x}\n                    y={animatedProps.y}\n                    style={{\n                        ...theme.annotations.text,\n                        strokeLinejoin: 'round',\n                        strokeWidth: theme.annotations.text.outlineWidth * 2,\n                        stroke: theme.annotations.text.outlineColor,\n                    }}\n                >\n                    {note}\n                </animated.text>\n            )}\n            <animated.text\n                x={animatedProps.x}\n                y={animatedProps.y}\n                style={omit(theme.annotations.text, ['outlineWidth', 'outlineColor'])}\n            >\n                {note}\n            </animated.text>\n        </>\n    )\n}\n","import { useMemo } from 'react'\nimport { animated } from '@react-spring/web'\nimport { useAnimatedPath, useTheme } from '@nivo/core'\n\nexport const AnnotationLink = ({\n    points,\n    isOutline = false,\n}: {\n    points: [number, number][]\n    isOutline?: boolean\n}) => {\n    const theme = useTheme()\n\n    const path = useMemo(() => {\n        const [firstPoint, ...otherPoints] = points\n\n        return otherPoints.reduce(\n            (acc, [x, y]) => `${acc} L${x},${y}`,\n            `M${firstPoint[0]},${firstPoint[1]}`\n        )\n    }, [points])\n\n    const animatedPath = useAnimatedPath(path)\n\n    if (isOutline && theme.annotations.link.outlineWidth <= 0) {\n        return null\n    }\n\n    const style = { ...theme.annotations.link }\n    if (isOutline) {\n        style.strokeLinecap = 'square'\n        style.strokeWidth =\n            theme.annotations.link.strokeWidth + theme.annotations.link.outlineWidth * 2\n        style.stroke = theme.annotations.link.outlineColor\n        style.opacity = theme.annotations.link.outlineOpacity\n    }\n\n    return <animated.path fill=\"none\" d={animatedPath} style={style} />\n}\n","import { useSpring, animated } from '@react-spring/web'\nimport { useMotionConfig, useTheme } from '@nivo/core'\n\nexport const CircleAnnotationOutline = ({ x, y, size }: { x: number; y: number; size: number }) => {\n    const theme = useTheme()\n    const { animate, config: springConfig } = useMotionConfig()\n\n    const animatedProps = useSpring({\n        x,\n        y,\n        radius: size / 2,\n        config: springConfig,\n        immediate: !animate,\n    })\n\n    return (\n        <>\n            {theme.annotations.outline.outlineWidth > 0 && (\n                <animated.circle\n                    cx={animatedProps.x}\n                    cy={animatedProps.y}\n                    r={animatedProps.radius}\n                    style={{\n                        ...theme.annotations.outline,\n                        fill: 'none',\n                        strokeWidth:\n                            theme.annotations.outline.strokeWidth +\n                            theme.annotations.outline.outlineWidth * 2,\n                        stroke: theme.annotations.outline.outlineColor,\n                        opacity: theme.annotations.outline.outlineOpacity,\n                    }}\n                />\n            )}\n            <animated.circle\n                cx={animatedProps.x}\n                cy={animatedProps.y}\n                r={animatedProps.radius}\n                style={theme.annotations.outline}\n            />\n        </>\n    )\n}\n","import { useSpring, animated } from '@react-spring/web'\nimport { useMotionConfig, useTheme } from '@nivo/core'\nimport { defaultProps } from './props'\n\nexport const DotAnnotationOutline = ({\n    x,\n    y,\n    size = defaultProps.dotSize,\n}: {\n    x: number\n    y: number\n    size?: number\n}) => {\n    const theme = useTheme()\n    const { animate, config: springConfig } = useMotionConfig()\n\n    const animatedProps = useSpring({\n        x,\n        y,\n        radius: size / 2,\n        config: springConfig,\n        immediate: !animate,\n    })\n\n    return (\n        <>\n            {theme.annotations.outline.outlineWidth > 0 && (\n                <animated.circle\n                    cx={animatedProps.x}\n                    cy={animatedProps.y}\n                    r={animatedProps.radius}\n                    style={{\n                        ...theme.annotations.outline,\n                        fill: 'none',\n                        strokeWidth: theme.annotations.outline.outlineWidth * 2,\n                        stroke: theme.annotations.outline.outlineColor,\n                        opacity: theme.annotations.outline.outlineOpacity,\n                    }}\n                />\n            )}\n            <animated.circle\n                cx={animatedProps.x}\n                cy={animatedProps.y}\n                r={animatedProps.radius}\n                style={theme.annotations.symbol}\n            />\n        </>\n    )\n}\n","import { useSpring, animated } from '@react-spring/web'\nimport { useMotionConfig, useTheme } from '@nivo/core'\n\nexport const RectAnnotationOutline = ({\n    x,\n    y,\n    width,\n    height,\n    borderRadius = 6,\n}: {\n    x: number\n    y: number\n    width: number\n    height: number\n    borderRadius?: number\n}) => {\n    const theme = useTheme()\n    const { animate, config: springConfig } = useMotionConfig()\n\n    const animatedProps = useSpring({\n        x: x - width / 2,\n        y: y - height / 2,\n        width,\n        height,\n        config: springConfig,\n        immediate: !animate,\n    })\n\n    return (\n        <>\n            {theme.annotations.outline.outlineWidth > 0 && (\n                <animated.rect\n                    x={animatedProps.x}\n                    y={animatedProps.y}\n                    rx={borderRadius}\n                    ry={borderRadius}\n                    width={animatedProps.width}\n                    height={animatedProps.height}\n                    style={{\n                        ...theme.annotations.outline,\n                        fill: 'none',\n                        strokeWidth:\n                            theme.annotations.outline.strokeWidth +\n                            theme.annotations.outline.outlineWidth * 2,\n                        stroke: theme.annotations.outline.outlineColor,\n                        opacity: theme.annotations.outline.outlineOpacity,\n                    }}\n                />\n            )}\n            <animated.rect\n                x={animatedProps.x}\n                y={animatedProps.y}\n                rx={borderRadius}\n                ry={borderRadius}\n                width={animatedProps.width}\n                height={animatedProps.height}\n                style={theme.annotations.outline}\n            />\n        </>\n    )\n}\n","import { useComputedAnnotation } from './hooks'\nimport { AnnotationNote } from './AnnotationNote'\nimport { AnnotationLink } from './AnnotationLink'\nimport { CircleAnnotationOutline } from './CircleAnnotationOutline'\nimport { DotAnnotationOutline } from './DotAnnotationOutline'\nimport { RectAnnotationOutline } from './RectAnnotationOutline'\nimport { BoundAnnotation } from './types'\nimport { isCircleAnnotation, isDotAnnotation, isRectAnnotation, isSvgNote } from './utils'\n\nexport const Annotation = <Datum,>(annotation: BoundAnnotation<Datum>) => {\n    const { datum, x, y, note } = annotation\n    const computed = useComputedAnnotation(annotation)\n\n    if (!isSvgNote(note)) {\n        throw new Error('note should be a valid react element')\n    }\n\n    return (\n        <>\n            <AnnotationLink points={computed.points} isOutline={true} />\n            {isCircleAnnotation(annotation) && (\n                <CircleAnnotationOutline x={x} y={y} size={annotation.size} />\n            )}\n            {isDotAnnotation(annotation) && (\n                <DotAnnotationOutline x={x} y={y} size={annotation.size} />\n            )}\n            {isRectAnnotation(annotation) && (\n                <RectAnnotationOutline\n                    x={x}\n                    y={y}\n                    width={annotation.width}\n                    height={annotation.height}\n                    borderRadius={annotation.borderRadius}\n                />\n            )}\n            <AnnotationLink points={computed.points} />\n            <AnnotationNote datum={datum} x={computed.text[0]} y={computed.text[1]} note={note} />\n        </>\n    )\n}\n","import { CompleteTheme } from '@nivo/core'\nimport { ComputedAnnotation } from './types'\nimport { isCanvasNote, isCircleAnnotation, isDotAnnotation, isRectAnnotation } from './utils'\n\nconst drawPoints = (ctx: CanvasRenderingContext2D, points: [number, number][]) => {\n    points.forEach(([x, y], index) => {\n        if (index === 0) {\n            ctx.moveTo(x, y)\n        } else {\n            ctx.lineTo(x, y)\n        }\n    })\n}\n\nexport const renderAnnotationsToCanvas = <Datum>(\n    ctx: CanvasRenderingContext2D,\n    {\n        annotations,\n        theme,\n    }: {\n        annotations: ComputedAnnotation<Datum>[]\n        theme: CompleteTheme\n    }\n) => {\n    if (annotations.length === 0) return\n\n    ctx.save()\n    annotations.forEach(annotation => {\n        if (!isCanvasNote(annotation.note)) {\n            throw new Error('note is invalid for canvas implementation')\n        }\n\n        if (theme.annotations.link.outlineWidth > 0) {\n            ctx.lineCap = 'square'\n            ctx.strokeStyle = theme.annotations.link.outlineColor\n            ctx.lineWidth =\n                theme.annotations.link.strokeWidth + theme.annotations.link.outlineWidth * 2\n            ctx.beginPath()\n            drawPoints(ctx, annotation.computed.points)\n            ctx.stroke()\n            ctx.lineCap = 'butt'\n        }\n\n        if (isCircleAnnotation(annotation) && theme.annotations.outline.outlineWidth > 0) {\n            ctx.strokeStyle = theme.annotations.outline.outlineColor\n            ctx.lineWidth =\n                theme.annotations.outline.strokeWidth + theme.annotations.outline.outlineWidth * 2\n            ctx.beginPath()\n            ctx.arc(annotation.x, annotation.y, annotation.size / 2, 0, 2 * Math.PI)\n            ctx.stroke()\n        }\n\n        if (isDotAnnotation(annotation) && theme.annotations.symbol.outlineWidth > 0) {\n            ctx.strokeStyle = theme.annotations.symbol.outlineColor\n            ctx.lineWidth = theme.annotations.symbol.outlineWidth * 2\n            ctx.beginPath()\n            ctx.arc(annotation.x, annotation.y, annotation.size / 2, 0, 2 * Math.PI)\n            ctx.stroke()\n        }\n\n        if (isRectAnnotation(annotation) && theme.annotations.outline.outlineWidth > 0) {\n            ctx.strokeStyle = theme.annotations.outline.outlineColor\n            ctx.lineWidth =\n                theme.annotations.outline.strokeWidth + theme.annotations.outline.outlineWidth * 2\n            ctx.beginPath()\n            ctx.rect(\n                annotation.x - annotation.width / 2,\n                annotation.y - annotation.height / 2,\n                annotation.width,\n                annotation.height\n            )\n            ctx.stroke()\n        }\n\n        ctx.strokeStyle = theme.annotations.link.stroke\n        ctx.lineWidth = theme.annotations.link.strokeWidth\n        ctx.beginPath()\n        drawPoints(ctx, annotation.computed.points)\n        ctx.stroke()\n\n        if (isCircleAnnotation(annotation)) {\n            ctx.strokeStyle = theme.annotations.outline.stroke\n            ctx.lineWidth = theme.annotations.outline.strokeWidth\n            ctx.beginPath()\n            ctx.arc(annotation.x, annotation.y, annotation.size / 2, 0, 2 * Math.PI)\n            ctx.stroke()\n        }\n\n        if (isDotAnnotation(annotation)) {\n            ctx.fillStyle = theme.annotations.symbol.fill\n            ctx.beginPath()\n            ctx.arc(annotation.x, annotation.y, annotation.size / 2, 0, 2 * Math.PI)\n            ctx.fill()\n        }\n\n        if (isRectAnnotation(annotation)) {\n            ctx.strokeStyle = theme.annotations.outline.stroke\n            ctx.lineWidth = theme.annotations.outline.strokeWidth\n            ctx.beginPath()\n            ctx.rect(\n                annotation.x - annotation.width / 2,\n                annotation.y - annotation.height / 2,\n                annotation.width,\n                annotation.height\n            )\n            ctx.stroke()\n        }\n\n        if (typeof annotation.note === 'function') {\n            annotation.note(ctx, {\n                datum: annotation.datum,\n                x: annotation.computed.text[0],\n                y: annotation.computed.text[1],\n                theme,\n            })\n        } else {\n            ctx.font = `${theme.annotations.text.fontSize}px ${theme.annotations.text.fontFamily}`\n            ctx.textAlign = 'left'\n            ctx.textBaseline = 'alphabetic'\n\n            ctx.fillStyle = theme.annotations.text.fill\n            ctx.strokeStyle = theme.annotations.text.outlineColor\n            ctx.lineWidth = theme.annotations.text.outlineWidth * 2\n\n            if (theme.annotations.text.outlineWidth > 0) {\n                ctx.lineJoin = 'round'\n                ctx.strokeText(\n                    annotation.note,\n                    annotation.computed.text[0],\n                    annotation.computed.text[1]\n                )\n                ctx.lineJoin = 'miter'\n            }\n            ctx.fillText(annotation.note, annotation.computed.text[0], annotation.computed.text[1])\n        }\n    })\n    ctx.restore()\n}\n"],"names":["defaultProps","dotSize","noteWidth","noteTextOffset","animate","motionStiffness","motionDamping","isSvgNote","note","noteType","isValidElement","isCanvasNote","isCircleAnnotation","annotationSpec","type","isDotAnnotation","isRectAnnotation","bindAnnotations","data","annotations","getPosition","getDimensions","reduce","acc","annotation","offset","_filter","match","map","datum","position","dimensions","size","width","height","_omit","getLinkAngle","sourceX","sourceY","targetX","targetY","angle","Math","atan2","absoluteAngleDegrees","radiansToDegrees","computeAnnotation","computedNoteX","computedNoteY","x","y","noteX","noteY","_isNumber","undefined","abs","Error","computedX","computedY","positionFromAngle","degreesToRadians","eighth","round","textX","noteLineX","points","text","useAnnotations","useMemo","useComputedAnnotations","computed","useComputedAnnotation","AnnotationNote","theme","useTheme","useMotionConfig","springConfig","config","animatedProps","useSpring","immediate","createElement","_jsxs","outlineWidth","_jsx","animated","style","strokeLinejoin","strokeWidth","stroke","outlineColor","omit","AnnotationLink","isOutline","path","firstPoint","animatedPath","useAnimatedPath","link","strokeLinecap","opacity","outlineOpacity","fill","d","CircleAnnotationOutline","radius","outline","circle","cx","cy","r","DotAnnotationOutline","symbol","RectAnnotationOutline","borderRadius","rect","rx","ry","Annotation","drawPoints","ctx","forEach","index","moveTo","lineTo","renderAnnotationsToCanvas","length","save","lineCap","strokeStyle","lineWidth","beginPath","arc","PI","fillStyle","font","fontSize","fontFamily","textAlign","textBaseline","lineJoin","strokeText","fillText","restore"],"mappings":"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"}