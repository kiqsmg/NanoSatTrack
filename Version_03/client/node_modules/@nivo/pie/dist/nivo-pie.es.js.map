{"version":3,"file":"nivo-pie.es.js","sources":["../src/PieLegends.tsx","../src/props.ts","../src/PieTooltip.tsx","../src/hooks.ts","../src/Arcs.tsx","../src/Pie.tsx","../src/ResponsivePie.tsx","../src/PieCanvas.tsx","../src/ResponsivePieCanvas.tsx"],"sourcesContent":["import { BoxLegendSvg } from '@nivo/legends'\nimport { CompletePieSvgProps, ComputedDatum, DatumId } from './types'\n\ninterface PieLegendsProps<RawDatum> {\n    width: number\n    height: number\n    legends: CompletePieSvgProps<RawDatum>['legends']\n    data: Omit<ComputedDatum<RawDatum>, 'arc'>[]\n    toggleSerie: (id: DatumId) => void\n}\n\nconst PieLegends = <RawDatum,>({\n    width,\n    height,\n    legends,\n    data,\n    toggleSerie,\n}: PieLegendsProps<RawDatum>) => {\n    return (\n        <>\n            {legends.map((legend, i) => (\n                <BoxLegendSvg\n                    key={i}\n                    {...legend}\n                    containerWidth={width}\n                    containerHeight={height}\n                    data={legend.data ?? data}\n                    toggleSerie={legend.toggleSerie ? toggleSerie : undefined}\n                />\n            ))}\n        </>\n    )\n}\n\nexport default PieLegends\n","import { OrdinalColorScaleConfig } from '@nivo/colors'\nimport { ArcTransitionMode } from '@nivo/arcs'\nimport { PieTooltip } from './PieTooltip'\n\nexport const defaultProps = {\n    id: 'id',\n    value: 'value',\n    sortByValue: false,\n    innerRadius: 0,\n    padAngle: 0,\n    cornerRadius: 0,\n\n    layers: ['arcLinkLabels', 'arcs', 'arcLabels', 'legends'],\n\n    // layout\n    startAngle: 0,\n    endAngle: 360,\n    fit: true,\n    activeInnerRadiusOffset: 0,\n    activeOuterRadiusOffset: 0,\n\n    // border\n    borderWidth: 0,\n    borderColor: {\n        from: 'color',\n        modifiers: [['darker', 1]],\n    },\n\n    // arc labels\n    enableArcLabels: true,\n    arcLabel: 'formattedValue',\n    arcLabelsSkipAngle: 0,\n    arcLabelsRadiusOffset: 0.5,\n    arcLabelsTextColor: { theme: 'labels.text.fill' },\n\n    // arc link labels\n    enableArcLinkLabels: true,\n    arcLinkLabel: 'id',\n    arcLinkLabelsSkipAngle: 0,\n    arcLinkLabelsOffset: 0,\n    arcLinkLabelsDiagonalLength: 16,\n    arcLinkLabelsStraightLength: 24,\n    arcLinkLabelsThickness: 1,\n    arcLinkLabelsTextOffset: 6,\n    arcLinkLabelsTextColor: { theme: 'labels.text.fill' },\n    arcLinkLabelsColor: { theme: 'axis.ticks.line.stroke' },\n\n    colors: { scheme: 'nivo' } as unknown as OrdinalColorScaleConfig,\n    defs: [],\n    fill: [],\n\n    isInteractive: true,\n\n    animate: true,\n    motionConfig: 'gentle',\n    transitionMode: 'innerRadius' as ArcTransitionMode,\n\n    tooltip: PieTooltip,\n\n    legends: [],\n\n    role: 'img',\n\n    pixelRatio: typeof window !== 'undefined' ? window.devicePixelRatio ?? 1 : 1,\n}\n","import { BasicTooltip } from '@nivo/tooltip'\nimport { ComputedDatum } from './types'\n\nexport const PieTooltip = <RawDatum,>({ datum }: { datum: ComputedDatum<RawDatum> }) => (\n    <BasicTooltip\n        id={datum.id}\n        value={datum.formattedValue}\n        enableChip={true}\n        color={datum.color}\n    />\n)\n\nexport default PieTooltip\n","import { useCallback, useMemo, useState } from 'react'\nimport { pie as d3Pie } from 'd3-shape'\nimport { useArcGenerator, computeArcBoundingBox } from '@nivo/arcs'\nimport {\n    degreesToRadians,\n    radiansToDegrees,\n    useValueFormatter,\n    usePropertyAccessor,\n} from '@nivo/core'\nimport { OrdinalColorScaleConfig, useOrdinalColorScale } from '@nivo/colors'\nimport { defaultProps } from './props'\nimport { CompletePieSvgProps, ComputedDatum, DatumId, PieArc, PieCustomLayerProps } from './types'\n\ninterface MayHaveLabel {\n    label?: string | number\n}\n\n/**\n * Format data so that we get a consistent data structure.\n * It will also add the `formattedValue` and `color` property.\n */\nexport const useNormalizedData = <RawDatum extends MayHaveLabel>({\n    data,\n    id = defaultProps.id,\n    value = defaultProps.value,\n    valueFormat,\n    colors = defaultProps.colors as OrdinalColorScaleConfig<\n        Omit<ComputedDatum<RawDatum>, 'arc' | 'color' | 'fill'>\n    >,\n}: Pick<CompletePieSvgProps<RawDatum>, 'id' | 'value' | 'valueFormat' | 'colors'> & {\n    data: RawDatum[]\n}): Omit<ComputedDatum<RawDatum>, 'arc' | 'fill'>[] => {\n    const getId = usePropertyAccessor<RawDatum, DatumId>(id)\n    const getValue = usePropertyAccessor<RawDatum, number>(value)\n    const formatValue = useValueFormatter<number>(valueFormat)\n\n    const getColor = useOrdinalColorScale<Omit<ComputedDatum<RawDatum>, 'arc' | 'color' | 'fill'>>(\n        colors,\n        'id'\n    )\n\n    return useMemo(\n        () =>\n            data.map(datum => {\n                const datumId = getId(datum)\n                const datumValue = getValue(datum)\n\n                const normalizedDatum: Omit<ComputedDatum<RawDatum>, 'arc' | 'color' | 'fill'> = {\n                    id: datumId,\n                    label: datum.label ?? datumId,\n                    hidden: false,\n                    value: datumValue,\n                    formattedValue: formatValue(datumValue),\n                    data: datum,\n                }\n\n                return {\n                    ...normalizedDatum,\n                    color: getColor(normalizedDatum),\n                }\n            }),\n        [data, getId, getValue, formatValue, getColor]\n    )\n}\n\n/**\n * Compute arcs, which don't depend yet on radius.\n */\nexport const usePieArcs = <RawDatum>({\n    data,\n    startAngle,\n    endAngle,\n    innerRadius,\n    outerRadius,\n    padAngle,\n    sortByValue,\n    activeId,\n    activeInnerRadiusOffset,\n    activeOuterRadiusOffset,\n    hiddenIds,\n}: {\n    data: Omit<ComputedDatum<RawDatum>, 'arc' | 'fill'>[]\n    // in degrees\n    startAngle: number\n    // in degrees\n    endAngle: number\n    // in pixels\n    innerRadius: number\n    // in pixels\n    outerRadius: number\n    padAngle: number\n    sortByValue: boolean\n    activeId: null | DatumId\n    activeInnerRadiusOffset: number\n    activeOuterRadiusOffset: number\n    hiddenIds: DatumId[]\n}): {\n    dataWithArc: Omit<ComputedDatum<RawDatum>, 'fill'>[]\n    legendData: Omit<ComputedDatum<RawDatum>, 'arc' | 'fill'>[]\n} => {\n    const pie = useMemo(() => {\n        const innerPie = d3Pie<Omit<ComputedDatum<RawDatum>, 'arc' | 'fill'>>()\n            .value(d => d.value)\n            .startAngle(degreesToRadians(startAngle))\n            .endAngle(degreesToRadians(endAngle))\n            .padAngle(degreesToRadians(padAngle))\n\n        if (!sortByValue) {\n            innerPie.sortValues(null)\n        }\n\n        return innerPie\n    }, [startAngle, endAngle, padAngle, sortByValue])\n\n    return useMemo(() => {\n        const hiddenData = data.filter(item => !hiddenIds.includes(item.id))\n        const dataWithArc = pie(hiddenData).map(\n            (\n                arc: Omit<\n                    PieArc,\n                    'angle' | 'angleDeg' | 'innerRadius' | 'outerRadius' | 'thickness'\n                > & {\n                    data: Omit<ComputedDatum<RawDatum>, 'arc' | 'fill'>\n                }\n            ) => {\n                const angle = Math.abs(arc.endAngle - arc.startAngle)\n\n                return {\n                    ...arc.data,\n                    arc: {\n                        index: arc.index,\n                        startAngle: arc.startAngle,\n                        endAngle: arc.endAngle,\n                        innerRadius:\n                            activeId === arc.data.id\n                                ? innerRadius - activeInnerRadiusOffset\n                                : innerRadius,\n                        outerRadius:\n                            activeId === arc.data.id\n                                ? outerRadius + activeOuterRadiusOffset\n                                : outerRadius,\n                        thickness: outerRadius - innerRadius,\n                        padAngle: arc.padAngle,\n                        angle,\n                        angleDeg: radiansToDegrees(angle),\n                    },\n                }\n            }\n        )\n        const legendData = data.map(item => ({ ...item, hidden: hiddenIds.includes(item.id) }))\n\n        return { dataWithArc, legendData }\n    }, [\n        pie,\n        data,\n        hiddenIds,\n        activeId,\n        innerRadius,\n        activeInnerRadiusOffset,\n        outerRadius,\n        activeOuterRadiusOffset,\n    ])\n}\n\n/**\n * Compute pie layout using explicit radius/innerRadius,\n * expressed in pixels.\n */\nexport const usePie = <RawDatum>({\n    data,\n    radius,\n    innerRadius,\n    startAngle = defaultProps.startAngle,\n    endAngle = defaultProps.endAngle,\n    padAngle = defaultProps.padAngle,\n    sortByValue = defaultProps.sortByValue,\n    cornerRadius = defaultProps.cornerRadius,\n    activeInnerRadiusOffset = defaultProps.activeInnerRadiusOffset,\n    activeOuterRadiusOffset = defaultProps.activeOuterRadiusOffset,\n}: Pick<\n    Partial<CompletePieSvgProps<RawDatum>>,\n    | 'startAngle'\n    | 'endAngle'\n    | 'padAngle'\n    | 'sortByValue'\n    | 'cornerRadius'\n    | 'activeInnerRadiusOffset'\n    | 'activeOuterRadiusOffset'\n> & {\n    data: Omit<ComputedDatum<RawDatum>, 'arc'>[]\n    radius: number\n    innerRadius: number\n}) => {\n    const [activeId, setActiveId] = useState<DatumId | null>(null)\n    const [hiddenIds, setHiddenIds] = useState<DatumId[]>([])\n    const pieArcs = usePieArcs({\n        data,\n        startAngle,\n        endAngle,\n        innerRadius,\n        outerRadius: radius,\n        padAngle,\n        sortByValue,\n        activeId,\n        activeInnerRadiusOffset,\n        activeOuterRadiusOffset,\n        hiddenIds,\n    })\n\n    const toggleSerie = useCallback((id: DatumId) => {\n        setHiddenIds(state =>\n            state.indexOf(id) > -1 ? state.filter(item => item !== id) : [...state, id]\n        )\n    }, [])\n\n    const arcGenerator = useArcGenerator({ cornerRadius, padAngle: degreesToRadians(padAngle) })\n\n    return { ...pieArcs, arcGenerator, setActiveId, toggleSerie }\n}\n\n/**\n * Compute pie layout using a box to find radius/innerRadius,\n * expressed in ratio (0~1), can optionally use the `fit`\n * attribute to find the most space efficient layout.\n *\n * It also returns `centerX`/`centerY` as those can be altered\n * if `fit` is `true`.\n */\nexport const usePieFromBox = <RawDatum>({\n    data,\n    width,\n    height,\n    innerRadius: innerRadiusRatio = defaultProps.innerRadius,\n    startAngle = defaultProps.startAngle,\n    endAngle = defaultProps.endAngle,\n    padAngle = defaultProps.padAngle,\n    sortByValue = defaultProps.sortByValue,\n    cornerRadius = defaultProps.cornerRadius,\n    fit = defaultProps.fit,\n    activeInnerRadiusOffset = defaultProps.activeInnerRadiusOffset,\n    activeOuterRadiusOffset = defaultProps.activeOuterRadiusOffset,\n}: Pick<\n    CompletePieSvgProps<RawDatum>,\n    | 'width'\n    | 'height'\n    | 'innerRadius'\n    | 'startAngle'\n    | 'endAngle'\n    | 'padAngle'\n    | 'sortByValue'\n    | 'cornerRadius'\n    | 'fit'\n    | 'activeInnerRadiusOffset'\n    | 'activeOuterRadiusOffset'\n> & {\n    data: Omit<ComputedDatum<RawDatum>, 'arc'>[]\n}) => {\n    const [activeId, setActiveId] = useState<string | number | null>(null)\n    const [hiddenIds, setHiddenIds] = useState<DatumId[]>([])\n    const computedProps = useMemo(() => {\n        let radius = Math.min(width, height) / 2\n        let innerRadius = radius * Math.min(innerRadiusRatio, 1)\n\n        let centerX = width / 2\n        let centerY = height / 2\n\n        let boundingBox\n        if (fit) {\n            const { points, ...box } = computeArcBoundingBox(\n                centerX,\n                centerY,\n                radius,\n                startAngle - 90,\n                endAngle - 90\n            )\n            const ratio = Math.min(width / box.width, height / box.height)\n\n            const adjustedBox: {\n                width: number\n                height: number\n                x?: number\n                y?: number\n            } = {\n                width: box.width * ratio,\n                height: box.height * ratio,\n            }\n            adjustedBox.x = (width - adjustedBox.width) / 2\n            adjustedBox.y = (height - adjustedBox.height) / 2\n\n            centerX = ((centerX - box.x) / box.width) * box.width * ratio + adjustedBox.x\n            centerY = ((centerY - box.y) / box.height) * box.height * ratio + adjustedBox.y\n\n            boundingBox = { box, ratio, points }\n\n            radius = radius * ratio\n            innerRadius = innerRadius * ratio\n        }\n\n        return {\n            centerX,\n            centerY,\n            radius,\n            innerRadius,\n            debug: boundingBox,\n        }\n    }, [width, height, innerRadiusRatio, startAngle, endAngle, fit, cornerRadius])\n\n    const pieArcs = usePieArcs({\n        data,\n        startAngle,\n        endAngle,\n        innerRadius: computedProps.innerRadius,\n        outerRadius: computedProps.radius,\n        padAngle,\n        sortByValue,\n        activeId,\n        activeInnerRadiusOffset,\n        activeOuterRadiusOffset,\n        hiddenIds,\n    })\n\n    const toggleSerie = useCallback((id: DatumId) => {\n        setHiddenIds(state =>\n            state.indexOf(id) > -1 ? state.filter(item => item !== id) : [...state, id]\n        )\n    }, [])\n\n    const arcGenerator = useArcGenerator({\n        cornerRadius,\n        padAngle: degreesToRadians(padAngle),\n    })\n\n    return {\n        arcGenerator,\n        setActiveId,\n        toggleSerie,\n        ...pieArcs,\n        ...computedProps,\n    }\n}\n\n/**\n * Memoize the context to pass to custom layers.\n */\nexport const usePieLayerContext = <RawDatum>({\n    dataWithArc,\n    arcGenerator,\n    centerX,\n    centerY,\n    radius,\n    innerRadius,\n}: PieCustomLayerProps<RawDatum>): PieCustomLayerProps<RawDatum> =>\n    useMemo(\n        () => ({\n            dataWithArc,\n            arcGenerator,\n            centerX,\n            centerY,\n            radius,\n            innerRadius,\n        }),\n        [dataWithArc, arcGenerator, centerX, centerY, radius, innerRadius]\n    )\n","import { createElement, useMemo } from 'react'\nimport * as React from 'react'\nimport { ArcGenerator, ArcsLayer } from '@nivo/arcs'\nimport { useTooltip } from '@nivo/tooltip'\nimport { ComputedDatum, CompletePieSvgProps } from './types'\n\ninterface ArcsProps<RawDatum> {\n    center: [number, number]\n    data: ComputedDatum<RawDatum>[]\n    arcGenerator: ArcGenerator\n    borderWidth: CompletePieSvgProps<RawDatum>['borderWidth']\n    borderColor: CompletePieSvgProps<RawDatum>['borderColor']\n    isInteractive: CompletePieSvgProps<RawDatum>['isInteractive']\n    onClick?: CompletePieSvgProps<RawDatum>['onClick']\n    onMouseEnter?: CompletePieSvgProps<RawDatum>['onMouseEnter']\n    onMouseMove?: CompletePieSvgProps<RawDatum>['onMouseMove']\n    onMouseLeave?: CompletePieSvgProps<RawDatum>['onMouseLeave']\n    setActiveId: (id: null | string | number) => void\n    tooltip: CompletePieSvgProps<RawDatum>['tooltip']\n    transitionMode: CompletePieSvgProps<RawDatum>['transitionMode']\n}\n\nexport const Arcs = <RawDatum,>({\n    center,\n    data,\n    arcGenerator,\n    borderWidth,\n    borderColor,\n    isInteractive,\n    onClick,\n    onMouseEnter,\n    onMouseMove,\n    onMouseLeave,\n    setActiveId,\n    tooltip,\n    transitionMode,\n}: ArcsProps<RawDatum>) => {\n    const { showTooltipFromEvent, hideTooltip } = useTooltip()\n\n    const handleClick = useMemo(() => {\n        if (!isInteractive) return undefined\n\n        return (datum: ComputedDatum<RawDatum>, event: React.MouseEvent<SVGPathElement>) => {\n            onClick?.(datum, event)\n        }\n    }, [isInteractive, onClick])\n\n    const handleMouseEnter = useMemo(() => {\n        if (!isInteractive) return undefined\n\n        return (datum: ComputedDatum<RawDatum>, event: React.MouseEvent<SVGPathElement>) => {\n            showTooltipFromEvent(createElement(tooltip, { datum }), event)\n            setActiveId(datum.id)\n            onMouseEnter?.(datum, event)\n        }\n    }, [isInteractive, showTooltipFromEvent, setActiveId, onMouseEnter, tooltip])\n\n    const handleMouseMove = useMemo(() => {\n        if (!isInteractive) return undefined\n\n        return (datum: ComputedDatum<RawDatum>, event: React.MouseEvent<SVGPathElement>) => {\n            showTooltipFromEvent(createElement(tooltip, { datum }), event)\n            onMouseMove?.(datum, event)\n        }\n    }, [isInteractive, showTooltipFromEvent, onMouseMove, tooltip])\n\n    const handleMouseLeave = useMemo(() => {\n        if (!isInteractive) return undefined\n\n        return (datum: ComputedDatum<RawDatum>, event: React.MouseEvent<SVGPathElement>) => {\n            hideTooltip()\n            setActiveId(null)\n            onMouseLeave?.(datum, event)\n        }\n    }, [isInteractive, hideTooltip, setActiveId, onMouseLeave])\n\n    return (\n        <ArcsLayer<ComputedDatum<RawDatum>>\n            center={center}\n            data={data}\n            arcGenerator={arcGenerator}\n            borderWidth={borderWidth}\n            borderColor={borderColor}\n            transitionMode={transitionMode}\n            onClick={handleClick}\n            onMouseEnter={handleMouseEnter}\n            onMouseMove={handleMouseMove}\n            onMouseLeave={handleMouseLeave}\n        />\n    )\n}\n","import { ReactNode, Fragment, createElement } from 'react'\nimport {\n    // @ts-ignore\n    bindDefs,\n    useDimensions,\n    Container,\n    SvgWrapper,\n} from '@nivo/core'\nimport { ArcLabelsLayer, ArcLinkLabelsLayer } from '@nivo/arcs'\nimport { InheritedColorConfig } from '@nivo/colors'\nimport PieLegends from './PieLegends'\nimport { useNormalizedData, usePieFromBox, usePieLayerContext } from './hooks'\nimport { ComputedDatum, PieLayer, PieSvgProps, PieLayerId } from './types'\nimport { defaultProps } from './props'\nimport { Arcs } from './Arcs'\n\nconst InnerPie = <RawDatum,>({\n    data,\n    id = defaultProps.id,\n    value = defaultProps.value,\n    valueFormat,\n    sortByValue = defaultProps.sortByValue,\n\n    layers = defaultProps.layers as PieLayer<RawDatum>[],\n\n    startAngle = defaultProps.startAngle,\n    endAngle = defaultProps.endAngle,\n    padAngle = defaultProps.padAngle,\n    fit = defaultProps.fit,\n    innerRadius: innerRadiusRatio = defaultProps.innerRadius,\n    cornerRadius = defaultProps.cornerRadius,\n    activeInnerRadiusOffset = defaultProps.activeInnerRadiusOffset,\n    activeOuterRadiusOffset = defaultProps.activeOuterRadiusOffset,\n\n    width,\n    height,\n    margin: partialMargin,\n\n    colors = defaultProps.colors,\n\n    // border\n    borderWidth = defaultProps.borderWidth,\n    borderColor = defaultProps.borderColor as InheritedColorConfig<ComputedDatum<RawDatum>>,\n\n    // arc labels\n    enableArcLabels = defaultProps.enableArcLabels,\n    arcLabel = defaultProps.arcLabel,\n    arcLabelsSkipAngle = defaultProps.arcLabelsSkipAngle,\n    arcLabelsTextColor = defaultProps.arcLabelsTextColor,\n    arcLabelsRadiusOffset = defaultProps.arcLabelsRadiusOffset,\n    arcLabelsComponent,\n\n    // arc link labels\n    enableArcLinkLabels = defaultProps.enableArcLinkLabels,\n    arcLinkLabel = defaultProps.arcLinkLabel,\n    arcLinkLabelsSkipAngle = defaultProps.arcLinkLabelsSkipAngle,\n    arcLinkLabelsOffset = defaultProps.arcLinkLabelsOffset,\n    arcLinkLabelsDiagonalLength = defaultProps.arcLinkLabelsDiagonalLength,\n    arcLinkLabelsStraightLength = defaultProps.arcLinkLabelsStraightLength,\n    arcLinkLabelsThickness = defaultProps.arcLinkLabelsThickness,\n    arcLinkLabelsTextOffset = defaultProps.arcLinkLabelsTextOffset,\n    arcLinkLabelsTextColor = defaultProps.arcLinkLabelsTextColor,\n    arcLinkLabelsColor = defaultProps.arcLinkLabelsColor,\n    arcLinkLabelComponent,\n\n    // styling\n    defs = defaultProps.defs,\n    fill = defaultProps.fill,\n\n    // interactivity\n    isInteractive = defaultProps.isInteractive,\n    onClick,\n    onMouseEnter,\n    onMouseMove,\n    onMouseLeave,\n    tooltip = defaultProps.tooltip,\n\n    transitionMode = defaultProps.transitionMode,\n\n    legends = defaultProps.legends,\n    role = defaultProps.role,\n}: PieSvgProps<RawDatum>) => {\n    const { outerWidth, outerHeight, margin, innerWidth, innerHeight } = useDimensions(\n        width,\n        height,\n        partialMargin\n    )\n\n    const normalizedData = useNormalizedData<RawDatum>({\n        data,\n        id,\n        value,\n        valueFormat,\n        colors,\n    })\n\n    const {\n        dataWithArc,\n        legendData,\n        arcGenerator,\n        centerX,\n        centerY,\n        radius,\n        innerRadius,\n        setActiveId,\n        toggleSerie,\n    } = usePieFromBox<RawDatum>({\n        data: normalizedData,\n        width: innerWidth,\n        height: innerHeight,\n        fit,\n        innerRadius: innerRadiusRatio,\n        startAngle,\n        endAngle,\n        padAngle,\n        sortByValue,\n        cornerRadius,\n        activeInnerRadiusOffset,\n        activeOuterRadiusOffset,\n    })\n\n    const boundDefs = bindDefs(defs, dataWithArc, fill)\n\n    const layerById: Record<PieLayerId, ReactNode> = {\n        arcLinkLabels: null,\n        arcs: null,\n        arcLabels: null,\n        legends: null,\n    }\n\n    if (enableArcLinkLabels && layers.includes('arcLinkLabels')) {\n        layerById.arcLinkLabels = (\n            <ArcLinkLabelsLayer<ComputedDatum<RawDatum>>\n                key=\"arcLinkLabels\"\n                center={[centerX, centerY]}\n                data={dataWithArc}\n                label={arcLinkLabel}\n                skipAngle={arcLinkLabelsSkipAngle}\n                offset={arcLinkLabelsOffset}\n                diagonalLength={arcLinkLabelsDiagonalLength}\n                straightLength={arcLinkLabelsStraightLength}\n                strokeWidth={arcLinkLabelsThickness}\n                textOffset={arcLinkLabelsTextOffset}\n                textColor={arcLinkLabelsTextColor}\n                linkColor={arcLinkLabelsColor}\n                component={arcLinkLabelComponent}\n            />\n        )\n    }\n\n    if (layers.includes('arcs')) {\n        layerById.arcs = (\n            <Arcs<RawDatum>\n                key=\"arcs\"\n                center={[centerX, centerY]}\n                data={dataWithArc}\n                arcGenerator={arcGenerator}\n                borderWidth={borderWidth}\n                borderColor={borderColor}\n                isInteractive={isInteractive}\n                onClick={onClick}\n                onMouseEnter={onMouseEnter}\n                onMouseMove={onMouseMove}\n                onMouseLeave={onMouseLeave}\n                setActiveId={setActiveId}\n                tooltip={tooltip}\n                transitionMode={transitionMode}\n            />\n        )\n    }\n\n    if (enableArcLabels && layers.includes('arcLabels')) {\n        layerById.arcLabels = (\n            <ArcLabelsLayer<ComputedDatum<RawDatum>>\n                key=\"arcLabels\"\n                center={[centerX, centerY]}\n                data={dataWithArc}\n                label={arcLabel}\n                radiusOffset={arcLabelsRadiusOffset}\n                skipAngle={arcLabelsSkipAngle}\n                textColor={arcLabelsTextColor}\n                transitionMode={transitionMode}\n                component={arcLabelsComponent}\n            />\n        )\n    }\n\n    if (legends.length > 0 && layers.includes('legends')) {\n        layerById.legends = (\n            <PieLegends<RawDatum>\n                key=\"legends\"\n                width={innerWidth}\n                height={innerHeight}\n                data={legendData}\n                legends={legends}\n                toggleSerie={toggleSerie}\n            />\n        )\n    }\n\n    const layerContext = usePieLayerContext<RawDatum>({\n        dataWithArc,\n        arcGenerator,\n        centerX,\n        centerY,\n        radius,\n        innerRadius,\n    })\n\n    return (\n        <SvgWrapper\n            width={outerWidth}\n            height={outerHeight}\n            margin={margin}\n            defs={boundDefs}\n            role={role}\n        >\n            {layers.map((layer, i) => {\n                if (layerById[layer as PieLayerId] !== undefined) {\n                    return layerById[layer as PieLayerId]\n                }\n\n                if (typeof layer === 'function') {\n                    return <Fragment key={i}>{createElement(layer, layerContext)}</Fragment>\n                }\n\n                return null\n            })}\n        </SvgWrapper>\n    )\n}\n\nexport const Pie = <RawDatum,>({\n    isInteractive = defaultProps.isInteractive,\n    animate = defaultProps.animate,\n    motionConfig = defaultProps.motionConfig,\n    theme,\n    renderWrapper,\n    ...otherProps\n}: PieSvgProps<RawDatum>) => (\n    <Container\n        {...{\n            animate,\n            isInteractive,\n            motionConfig,\n            renderWrapper,\n            theme,\n        }}\n    >\n        <InnerPie<RawDatum> isInteractive={isInteractive} {...otherProps} />\n    </Container>\n)\n","import { ResponsiveWrapper } from '@nivo/core'\nimport { Pie } from './Pie'\nimport { PieSvgProps } from './types'\n\nexport const ResponsivePie = <RawDatum,>(\n    props: Omit<PieSvgProps<RawDatum>, 'width' | 'height'>\n) => (\n    <ResponsiveWrapper>\n        {({ width, height }: { width: number; height: number }) => (\n            <Pie<RawDatum> width={width} height={height} {...props} />\n        )}\n    </ResponsiveWrapper>\n)\n","import { createElement, useEffect, useMemo, useRef } from 'react'\nimport * as React from 'react'\nimport { getRelativeCursor, useDimensions, useTheme, Container } from '@nivo/core'\nimport { renderLegendToCanvas } from '@nivo/legends'\nimport { useInheritedColor, InheritedColorConfig } from '@nivo/colors'\nimport { useTooltip } from '@nivo/tooltip'\nimport {\n    Arc,\n    findArcUnderCursor,\n    useArcLabels,\n    drawCanvasArcLabels,\n    useArcLinkLabels,\n    drawCanvasArcLinkLabels,\n} from '@nivo/arcs'\nimport { useNormalizedData, usePieFromBox } from './hooks'\nimport { ComputedDatum, PieCanvasProps } from './types'\nimport { defaultProps } from './props'\n\nconst InnerPieCanvas = <RawDatum,>({\n    data,\n    id = defaultProps.id,\n    value = defaultProps.value,\n    valueFormat,\n    sortByValue = defaultProps.sortByValue,\n\n    startAngle = defaultProps.startAngle,\n    endAngle = defaultProps.endAngle,\n    padAngle = defaultProps.padAngle,\n    fit = defaultProps.fit,\n    innerRadius: innerRadiusRatio = defaultProps.innerRadius,\n    cornerRadius = defaultProps.cornerRadius,\n    activeInnerRadiusOffset = defaultProps.activeInnerRadiusOffset,\n    activeOuterRadiusOffset = defaultProps.activeOuterRadiusOffset,\n\n    width,\n    height,\n    margin: partialMargin,\n    pixelRatio = 1,\n\n    colors = defaultProps.colors,\n\n    // border\n    borderWidth = defaultProps.borderWidth,\n    borderColor = defaultProps.borderColor as InheritedColorConfig<ComputedDatum<RawDatum>>,\n\n    // arc labels\n    enableArcLabels = defaultProps.enableArcLabels,\n    arcLabel = defaultProps.arcLabel,\n    arcLabelsSkipAngle = defaultProps.arcLabelsSkipAngle,\n    arcLabelsTextColor = defaultProps.arcLabelsTextColor,\n    arcLabelsRadiusOffset = defaultProps.arcLabelsRadiusOffset,\n\n    // arc link labels\n    enableArcLinkLabels = defaultProps.enableArcLinkLabels,\n    arcLinkLabel = defaultProps.arcLinkLabel,\n    arcLinkLabelsSkipAngle = defaultProps.arcLinkLabelsSkipAngle,\n    arcLinkLabelsOffset = defaultProps.arcLinkLabelsOffset,\n    arcLinkLabelsDiagonalLength = defaultProps.arcLinkLabelsDiagonalLength,\n    arcLinkLabelsStraightLength = defaultProps.arcLinkLabelsStraightLength,\n    arcLinkLabelsThickness = defaultProps.arcLinkLabelsThickness,\n    arcLinkLabelsTextOffset = defaultProps.arcLinkLabelsTextOffset,\n    arcLinkLabelsTextColor = defaultProps.arcLinkLabelsTextColor,\n    arcLinkLabelsColor = defaultProps.arcLinkLabelsColor,\n\n    // interactivity\n    isInteractive = defaultProps.isInteractive,\n    onClick,\n    onMouseMove,\n    tooltip = defaultProps.tooltip,\n\n    legends = defaultProps.legends,\n}: PieCanvasProps<RawDatum>) => {\n    const canvasEl = useRef<HTMLCanvasElement | null>(null)\n    const theme = useTheme()\n\n    const { margin, innerWidth, innerHeight, outerWidth, outerHeight } = useDimensions(\n        width,\n        height,\n        partialMargin\n    )\n\n    const normalizedData = useNormalizedData<RawDatum>({\n        data,\n        id,\n        value,\n        valueFormat,\n        colors,\n    })\n\n    const { dataWithArc, arcGenerator, centerX, centerY, radius, innerRadius, setActiveId } =\n        usePieFromBox<RawDatum>({\n            data: normalizedData,\n            width: innerWidth,\n            height: innerHeight,\n            fit,\n            innerRadius: innerRadiusRatio,\n            startAngle,\n            endAngle,\n            padAngle,\n            sortByValue,\n            cornerRadius,\n            activeInnerRadiusOffset,\n            activeOuterRadiusOffset,\n        })\n\n    const getBorderColor = useInheritedColor<ComputedDatum<RawDatum>>(borderColor, theme)\n\n    const arcLabels = useArcLabels<ComputedDatum<RawDatum>>({\n        data: dataWithArc,\n        label: arcLabel,\n        skipAngle: arcLabelsSkipAngle,\n        offset: arcLabelsRadiusOffset,\n        textColor: arcLabelsTextColor,\n    })\n\n    const arcLinkLabels = useArcLinkLabels<ComputedDatum<RawDatum>>({\n        data: dataWithArc,\n        skipAngle: arcLinkLabelsSkipAngle,\n        offset: arcLinkLabelsOffset,\n        diagonalLength: arcLinkLabelsDiagonalLength,\n        straightLength: arcLinkLabelsStraightLength,\n        label: arcLinkLabel,\n        linkColor: arcLinkLabelsColor,\n        textOffset: arcLinkLabelsTextOffset,\n        textColor: arcLinkLabelsTextColor,\n    })\n\n    useEffect(() => {\n        if (!canvasEl.current) return\n\n        canvasEl.current.width = outerWidth * pixelRatio\n        canvasEl.current.height = outerHeight * pixelRatio\n\n        const ctx = canvasEl.current.getContext('2d')!\n\n        ctx.scale(pixelRatio, pixelRatio)\n\n        ctx.fillStyle = theme.background\n        ctx.fillRect(0, 0, outerWidth, outerHeight)\n\n        ctx.save()\n        ctx.translate(margin.left, margin.top)\n        arcGenerator.context(ctx)\n\n        ctx.save()\n        ctx.translate(centerX, centerY)\n\n        dataWithArc.forEach(arc => {\n            ctx.beginPath()\n            ctx.fillStyle = arc.color\n\n            ctx.strokeStyle = getBorderColor(arc)\n            ctx.lineWidth = borderWidth\n\n            arcGenerator(arc.arc)\n\n            ctx.fill()\n\n            if (borderWidth > 0) {\n                ctx.stroke()\n            }\n        })\n\n        if (enableArcLinkLabels === true) {\n            drawCanvasArcLinkLabels<ComputedDatum<RawDatum>>(\n                ctx,\n                arcLinkLabels,\n                theme,\n                arcLinkLabelsThickness\n            )\n        }\n\n        if (enableArcLabels === true) {\n            drawCanvasArcLabels<ComputedDatum<RawDatum>>(ctx, arcLabels, theme)\n        }\n\n        // legends assume a box rather than a center,\n        // that's why we restore previously saved position here.\n        ctx.restore()\n        legends.forEach(legend => {\n            renderLegendToCanvas(ctx, {\n                ...legend,\n                data: dataWithArc,\n                containerWidth: innerWidth,\n                containerHeight: innerHeight,\n                theme,\n            })\n        })\n    }, [\n        canvasEl,\n        innerWidth,\n        innerHeight,\n        outerWidth,\n        outerHeight,\n        margin.top,\n        margin.left,\n        pixelRatio,\n        centerX,\n        centerY,\n        arcGenerator,\n        dataWithArc,\n        getBorderColor,\n        enableArcLabels,\n        arcLabels,\n        enableArcLinkLabels,\n        arcLinkLabels,\n        arcLinkLabelsThickness,\n        legends,\n        theme,\n    ])\n\n    const arcs = useMemo(\n        () =>\n            dataWithArc.map(datum => ({\n                id: datum.id,\n                ...datum.arc,\n            })),\n        [dataWithArc]\n    )\n\n    const getArcFromMouse = (event: React.MouseEvent<HTMLCanvasElement>) => {\n        if (!canvasEl.current) return null\n\n        const [x, y] = getRelativeCursor(canvasEl.current, event)\n\n        const hoveredArc = findArcUnderCursor<Arc & { id: string | number }>(\n            margin.left + centerX,\n            margin.top + centerY,\n            radius,\n            innerRadius,\n            arcs,\n            x,\n            y\n        )\n\n        if (!hoveredArc) return null\n\n        return dataWithArc.find(datum => datum.id === hoveredArc.id)\n    }\n\n    const { showTooltipFromEvent, hideTooltip } = useTooltip()\n\n    const handleMouseHover = (event: React.MouseEvent<HTMLCanvasElement>) => {\n        const datum = getArcFromMouse(event)\n        if (datum) {\n            onMouseMove?.(datum, event)\n            setActiveId(datum.id)\n            showTooltipFromEvent(createElement(tooltip, { datum }), event)\n        } else {\n            setActiveId(null)\n            hideTooltip()\n        }\n    }\n\n    const handleMouseLeave = () => {\n        hideTooltip()\n    }\n\n    const handleClick = (event: React.MouseEvent<HTMLCanvasElement>) => {\n        if (!onClick) return\n\n        const arc = getArcFromMouse(event)\n        if (arc) {\n            onClick(arc, event)\n        }\n    }\n\n    return (\n        <canvas\n            ref={canvasEl}\n            width={outerWidth * pixelRatio}\n            height={outerHeight * pixelRatio}\n            style={{\n                width: outerWidth,\n                height: outerHeight,\n                cursor: isInteractive ? 'auto' : 'normal',\n            }}\n            onMouseEnter={isInteractive ? handleMouseHover : undefined}\n            onMouseMove={isInteractive ? handleMouseHover : undefined}\n            onMouseLeave={isInteractive ? handleMouseLeave : undefined}\n            onClick={isInteractive ? handleClick : undefined}\n        />\n    )\n}\n\nexport const PieCanvas = <RawDatum,>({\n    isInteractive = defaultProps.isInteractive,\n    theme,\n    renderWrapper,\n    ...otherProps\n}: PieCanvasProps<RawDatum>) => (\n    <Container {...{ isInteractive, renderWrapper, theme }}>\n        <InnerPieCanvas<RawDatum> isInteractive={isInteractive} {...otherProps} />\n    </Container>\n)\n","import { ResponsiveWrapper } from '@nivo/core'\nimport { PieCanvas } from './PieCanvas'\nimport { PieCanvasProps } from './types'\n\nexport const ResponsivePieCanvas = <RawDatum,>(\n    props: Omit<PieCanvasProps<RawDatum>, 'width' | 'height'>\n) => (\n    <ResponsiveWrapper>\n        {({ width, height }: { width: number; height: number }) => (\n            <PieCanvas<RawDatum> width={width} height={height} {...props} />\n        )}\n    </ResponsiveWrapper>\n)\n"],"names":["PieLegends","width","height","legends","data","toggleSerie","_jsx","map","legend","i","BoxLegendSvg","containerWidth","containerHeight","undefined","defaultProps","id","value","sortByValue","innerRadius","padAngle","cornerRadius","layers","startAngle","endAngle","fit","activeInnerRadiusOffset","activeOuterRadiusOffset","borderWidth","borderColor","from","modifiers","enableArcLabels","arcLabel","arcLabelsSkipAngle","arcLabelsRadiusOffset","arcLabelsTextColor","theme","enableArcLinkLabels","arcLinkLabel","arcLinkLabelsSkipAngle","arcLinkLabelsOffset","arcLinkLabelsDiagonalLength","arcLinkLabelsStraightLength","arcLinkLabelsThickness","arcLinkLabelsTextOffset","arcLinkLabelsTextColor","arcLinkLabelsColor","colors","scheme","defs","fill","isInteractive","animate","motionConfig","transitionMode","tooltip","datum","BasicTooltip","formattedValue","enableChip","color","role","pixelRatio","window","devicePixelRatio","useNormalizedData","valueFormat","getId","usePropertyAccessor","getValue","formatValue","useValueFormatter","getColor","useOrdinalColorScale","useMemo","datumId","datumValue","normalizedDatum","label","hidden","usePieArcs","outerRadius","activeId","hiddenIds","pie","innerPie","d3Pie","d","degreesToRadians","sortValues","hiddenData","filter","item","includes","dataWithArc","arc","angle","Math","abs","index","thickness","angleDeg","radiansToDegrees","legendData","usePie","radius","useState","setActiveId","setHiddenIds","pieArcs","useCallback","state","indexOf","arcGenerator","useArcGenerator","usePieFromBox","innerRadiusRatio","computedProps","boundingBox","min","centerX","centerY","computeArcBoundingBox","points","box","ratio","adjustedBox","x","y","debug","usePieLayerContext","Arcs","center","onClick","onMouseEnter","onMouseMove","onMouseLeave","useTooltip","showTooltipFromEvent","hideTooltip","handleClick","event","handleMouseEnter","createElement","handleMouseMove","handleMouseLeave","ArcsLayer","InnerPie","partialMargin","margin","arcLabelsComponent","arcLinkLabelComponent","useDimensions","outerWidth","outerHeight","innerWidth","innerHeight","normalizedData","boundDefs","bindDefs","layerById","arcLinkLabels","arcs","arcLabels","ArcLinkLabelsLayer","skipAngle","offset","diagonalLength","straightLength","strokeWidth","textOffset","textColor","linkColor","component","ArcLabelsLayer","radiusOffset","length","layerContext","SvgWrapper","layer","Fragment","Pie","renderWrapper","otherProps","Container","ResponsivePie","props","ResponsiveWrapper","InnerPieCanvas","canvasEl","useRef","useTheme","getBorderColor","useInheritedColor","useArcLabels","useArcLinkLabels","useEffect","current","ctx","getContext","scale","fillStyle","background","fillRect","save","translate","left","top","context","forEach","beginPath","strokeStyle","lineWidth","stroke","drawCanvasArcLinkLabels","drawCanvasArcLabels","restore","renderLegendToCanvas","getArcFromMouse","getRelativeCursor","hoveredArc","findArcUnderCursor","find","handleMouseHover","ref","style","cursor","PieCanvas","ResponsivePieCanvas"],"mappings":"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"}