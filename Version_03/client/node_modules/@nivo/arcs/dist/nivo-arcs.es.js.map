{"version":3,"file":"nivo-arcs.es.js","sources":["../src/arc_labels/ArcLabel.tsx","../src/utils.ts","../src/arcTransitionMode.ts","../src/centers.ts","../src/arc_labels/ArcLabelsLayer.tsx","../src/arc_labels/canvas.ts","../src/arc_labels/useArcLabels.ts","../src/arc_labels/index.ts","../src/arc_link_labels/ArcLinkLabel.tsx","../src/arc_link_labels/compute.ts","../src/arc_link_labels/useArcLinkLabelsTransition.ts","../src/arc_link_labels/ArcLinkLabelsLayer.tsx","../src/arc_link_labels/canvas.ts","../src/arc_link_labels/useArcLinks.ts","../src/arc_link_labels/useArcLinkLabels.ts","../src/arc_link_labels/index.ts","../src/ArcLine.tsx","../src/ArcShape.tsx","../src/interpolateArc.ts","../src/useArcsTransition.ts","../src/ArcsLayer.tsx","../src/boundingBox.ts","../src/interactivity.ts","../src/useAnimatedArc.ts","../src/useArcGenerator.ts"],"sourcesContent":["import { CSSProperties } from 'react'\nimport { SpringValue, Interpolation, animated } from '@react-spring/web'\nimport { useTheme } from '@nivo/core'\nimport { DatumWithArcAndColor } from '../types'\n\nconst staticStyle: CSSProperties = {\n    pointerEvents: 'none',\n}\n\nexport interface ArcLabelProps<Datum extends DatumWithArcAndColor> {\n    datum: Datum\n    label: string\n    style: {\n        progress: SpringValue<number>\n        transform: Interpolation<string>\n        textColor: string\n    }\n}\n\nexport const ArcLabel = <Datum extends DatumWithArcAndColor>({\n    label,\n    style,\n}: ArcLabelProps<Datum>) => {\n    const theme = useTheme()\n\n    return (\n        <animated.g transform={style.transform} opacity={style.progress} style={staticStyle}>\n            <animated.text\n                textAnchor=\"middle\"\n                dominantBaseline=\"central\"\n                style={{\n                    ...theme.labels.text,\n                    fill: style.textColor,\n                }}\n            >\n                {label}\n            </animated.text>\n        </animated.g>\n    )\n}\n","import { useMemo } from 'react'\nimport { radiansToDegrees, positionFromAngle, degreesToRadians } from '@nivo/core'\nimport { DatumWithArc } from './types'\n\n/**\n * Make sure an angle (expressed in radians)\n * always falls in the range 0~2*PI.\n */\nexport const getNormalizedAngle = (angle: number) => {\n    let normalizedAngle = angle % (Math.PI * 2)\n    if (normalizedAngle < 0) {\n        normalizedAngle += Math.PI * 2\n    }\n\n    return normalizedAngle\n}\n\n/**\n * Filter out arcs with a length below `skipAngle`.\n */\nexport const filterDataBySkipAngle = <Datum extends DatumWithArc>(\n    data: Datum[],\n    skipAngle: number\n) =>\n    data.filter(\n        datum => Math.abs(radiansToDegrees(datum.arc.endAngle - datum.arc.startAngle)) >= skipAngle\n    )\n\n/**\n * Memoized version of `filterDataBySkipAngle`.\n */\nexport const useFilteredDataBySkipAngle = <Datum extends DatumWithArc>(\n    data: Datum[],\n    skipAngle: number\n) => useMemo(() => filterDataBySkipAngle(data, skipAngle), [data, skipAngle])\n\nexport const svgEllipticalArcCommand = (\n    radius: number,\n    largeArcFlag: 0 | 1,\n    sweepFlag: 0 | 1,\n    x: number,\n    y: number\n) =>\n    [\n        'A',\n        radius,\n        radius,\n        0, // x-axis-rotation\n        largeArcFlag,\n        sweepFlag,\n        x,\n        y,\n    ].join(' ')\n\nexport const generateSvgArc = (\n    radius: number,\n    originalStartAngle: number,\n    originalEndAngle: number\n): string => {\n    const startAngle = Math.min(originalStartAngle, originalEndAngle)\n    const endAngle = Math.max(originalStartAngle, originalEndAngle)\n\n    const start = positionFromAngle(degreesToRadians(endAngle), radius)\n    const end = positionFromAngle(degreesToRadians(startAngle), radius)\n\n    // we have a full circle, we cannot use a single elliptical arc\n    // to draw it, so we use 2 in that case.\n    if (endAngle - startAngle >= 360) {\n        const mid = positionFromAngle(degreesToRadians(startAngle + 180), radius)\n\n        return [\n            `M ${start.x} ${start.y}`,\n            svgEllipticalArcCommand(radius, 1, 1, mid.x, mid.y),\n            `M ${start.x} ${start.y}`,\n            svgEllipticalArcCommand(radius, 1, 0, mid.x, mid.y),\n        ].join(' ')\n    }\n\n    const largeArcFlag = endAngle - startAngle <= 180 ? 0 : 1\n\n    return [\n        `M ${start.x} ${start.y}`,\n        svgEllipticalArcCommand(radius, largeArcFlag, 0, end.x, end.y),\n    ].join(' ')\n}\n","import { Arc, DatumWithArc } from './types'\nimport { useMemo } from 'react'\n\nexport interface ArcTransitionModeConfig {\n    enter: (arc: Arc) => Arc\n    update: (arc: Arc) => Arc\n    leave: (arc: Arc) => Arc\n}\n\nexport const arcTransitionModes = [\n    'startAngle',\n    'middleAngle',\n    'endAngle',\n    'innerRadius',\n    'centerRadius',\n    'outerRadius',\n    'pushIn',\n    'pushOut',\n] as const\nexport type ArcTransitionMode = typeof arcTransitionModes[number]\n\nexport const arcTransitionModeById: Record<ArcTransitionMode, ArcTransitionModeConfig> = {\n    startAngle: {\n        enter: (arc: Arc) => ({\n            ...arc,\n            endAngle: arc.startAngle,\n        }),\n        update: (arc: Arc) => arc,\n        leave: (arc: Arc) => ({\n            ...arc,\n            startAngle: arc.endAngle,\n        }),\n    },\n    middleAngle: {\n        enter: (arc: Arc) => {\n            const middleAngle = arc.startAngle + (arc.endAngle - arc.startAngle) / 2\n\n            return {\n                ...arc,\n                startAngle: middleAngle,\n                endAngle: middleAngle,\n            }\n        },\n        update: (arc: Arc) => arc,\n        leave: (arc: Arc) => {\n            const middleAngle = arc.startAngle + (arc.endAngle - arc.startAngle) / 2\n\n            return {\n                ...arc,\n                startAngle: middleAngle,\n                endAngle: middleAngle,\n            }\n        },\n    },\n    endAngle: {\n        enter: (arc: Arc) => ({\n            ...arc,\n            startAngle: arc.endAngle,\n        }),\n        update: (arc: Arc) => arc,\n        leave: (arc: Arc) => ({\n            ...arc,\n            endAngle: arc.startAngle,\n        }),\n    },\n    innerRadius: {\n        enter: (arc: Arc) => ({\n            ...arc,\n            outerRadius: arc.innerRadius,\n        }),\n        update: (arc: Arc) => arc,\n        leave: (arc: Arc) => ({\n            ...arc,\n            innerRadius: arc.outerRadius,\n        }),\n    },\n    centerRadius: {\n        enter: (arc: Arc) => {\n            const centerRadius = arc.innerRadius + (arc.outerRadius - arc.innerRadius) / 2\n\n            return {\n                ...arc,\n                innerRadius: centerRadius,\n                outerRadius: centerRadius,\n            }\n        },\n        update: (arc: Arc) => arc,\n        leave: (arc: Arc) => {\n            const centerRadius = arc.innerRadius + (arc.outerRadius - arc.innerRadius) / 2\n\n            return {\n                ...arc,\n                innerRadius: centerRadius,\n                outerRadius: centerRadius,\n            }\n        },\n    },\n    outerRadius: {\n        enter: (arc: Arc) => ({\n            ...arc,\n            innerRadius: arc.outerRadius,\n        }),\n        update: (arc: Arc) => arc,\n        leave: (arc: Arc) => ({\n            ...arc,\n            outerRadius: arc.innerRadius,\n        }),\n    },\n    pushIn: {\n        enter: (arc: Arc) => ({\n            ...arc,\n            innerRadius: arc.innerRadius - arc.outerRadius + arc.innerRadius,\n            outerRadius: arc.innerRadius,\n        }),\n        update: (arc: Arc) => arc,\n        leave: (arc: Arc) => ({\n            ...arc,\n            innerRadius: arc.outerRadius,\n            outerRadius: arc.outerRadius + arc.outerRadius - arc.innerRadius,\n        }),\n    },\n    pushOut: {\n        enter: (arc: Arc) => ({\n            ...arc,\n            innerRadius: arc.outerRadius,\n            outerRadius: arc.outerRadius + arc.outerRadius - arc.innerRadius,\n        }),\n        update: (arc: Arc) => arc,\n        leave: (arc: Arc) => ({\n            ...arc,\n            innerRadius: arc.innerRadius - arc.outerRadius + arc.innerRadius,\n            outerRadius: arc.innerRadius,\n        }),\n    },\n}\n\nexport interface TransitionExtra<Datum extends DatumWithArc, ExtraProps> {\n    enter: (datum: Datum) => ExtraProps\n    update: (datum: Datum) => ExtraProps\n    leave: (datum: Datum) => ExtraProps\n}\n\nexport const useArcTransitionMode = <Datum extends DatumWithArc, ExtraProps>(\n    mode: ArcTransitionMode,\n    extraTransition?: TransitionExtra<Datum, ExtraProps>\n) =>\n    useMemo(() => {\n        const transitionMode = arcTransitionModeById[mode]\n\n        return {\n            enter: (datum: Datum) => ({\n                progress: 0,\n                ...transitionMode.enter(datum.arc),\n                ...(extraTransition ? extraTransition.enter(datum) : {}),\n            }),\n            update: (datum: Datum) => ({\n                progress: 1,\n                ...transitionMode.update(datum.arc),\n                ...(extraTransition ? extraTransition.update(datum) : {}),\n            }),\n            leave: (datum: Datum) => ({\n                progress: 0,\n                ...transitionMode.leave(datum.arc),\n                ...(extraTransition ? extraTransition.leave(datum) : {}),\n            }),\n        }\n    }, [mode, extraTransition])\n","import { useMemo } from 'react'\nimport { useTransition, to, SpringValue } from '@react-spring/web'\nimport {\n    // @ts-ignore\n    midAngle,\n    positionFromAngle,\n    useMotionConfig,\n} from '@nivo/core'\nimport { Arc, DatumWithArc, Point } from './types'\nimport { filterDataBySkipAngle } from './utils'\nimport { ArcTransitionMode, TransitionExtra, useArcTransitionMode } from './arcTransitionMode'\n\nexport const computeArcCenter = (arc: Arc, offset: number): Point => {\n    const angle = midAngle(arc) - Math.PI / 2\n    const radius = arc.innerRadius + (arc.outerRadius - arc.innerRadius) * offset\n\n    return positionFromAngle(angle, radius)\n}\n\nexport const interpolateArcCenter =\n    (offset: number) =>\n    (\n        startAngleValue: SpringValue<number>,\n        endAngleValue: SpringValue<number>,\n        innerRadiusValue: SpringValue<number>,\n        outerRadiusValue: SpringValue<number>\n    ) =>\n        to(\n            [startAngleValue, endAngleValue, innerRadiusValue, outerRadiusValue],\n            (startAngle, endAngle, innerRadius, outerRadius) => {\n                const centroid = computeArcCenter(\n                    { startAngle, endAngle, innerRadius, outerRadius },\n                    offset\n                )\n\n                return `translate(${centroid.x},${centroid.y})`\n            }\n        )\n\nexport const useArcCentersTransition = <Datum extends DatumWithArc, ExtraProps = unknown>(\n    data: Datum[],\n    // define where the centers should be placed,\n    // 0.0: inner radius\n    // 0.5: center\n    // 1.0: outer radius\n    offset = 0.5,\n    mode: ArcTransitionMode = 'innerRadius',\n    extra?: TransitionExtra<Datum, ExtraProps>\n) => {\n    const { animate, config: springConfig } = useMotionConfig()\n\n    const phases = useArcTransitionMode<Datum, ExtraProps>(mode, extra)\n\n    const transition = useTransition<\n        Datum,\n        {\n            progress: number\n            startAngle: number\n            endAngle: number\n            innerRadius: number\n            outerRadius: number\n        } & ExtraProps\n    >(data, {\n        keys: datum => datum.id,\n        initial: phases.update,\n        from: phases.enter,\n        enter: phases.update,\n        update: phases.update,\n        leave: phases.leave,\n        config: springConfig,\n        immediate: !animate,\n    })\n\n    return {\n        transition,\n        interpolate: interpolateArcCenter(offset),\n    }\n}\n\nexport interface ArcCenter<Datum extends DatumWithArc> extends Point {\n    data: Datum\n}\n\n/**\n * Compute an array of arc centers from an array of data containing arcs.\n *\n * If you plan to animate those, you could use `useArcCentersTransition`\n * instead, you could use the returned array with react-spring `useTransition`,\n * but this would lead to cartesian transitions (x/y), while `useArcCentersTransition`\n * will generate proper transitions using radius/angle.\n */\nexport const useArcCenters = <\n    Datum extends DatumWithArc,\n    ExtraProps extends Record<string, any> = Record<string, any>\n>({\n    data,\n    offset = 0.5,\n    skipAngle = 0,\n    computeExtraProps = () => ({} as ExtraProps),\n}: {\n    data: Datum[]\n    // define where the centers should be placed,\n    // 0.0: inner radius\n    // 0.5: center\n    // 1.0: outer radius\n    offset?: number\n    // arcs with a length below this (end angle - start angle in degrees)\n    // are going to be excluded, this can typically be used to avoid having\n    // overlapping labels.\n    skipAngle?: number\n    // this can be used to append extra properties to the centers,\n    // can be used to compute a color/label for example.\n    computeExtraProps?: (datum: Datum) => ExtraProps\n}): (ArcCenter<Datum> & ExtraProps)[] =>\n    useMemo(\n        () =>\n            filterDataBySkipAngle<Datum>(data, skipAngle)\n                // compute position and extra props for each eligible datum\n                .map(datum => {\n                    const position = computeArcCenter(datum.arc, offset)\n\n                    return {\n                        ...computeExtraProps(datum),\n                        x: position.x,\n                        y: position.y,\n                        data: datum,\n                    }\n                }),\n        [data, offset, skipAngle, computeExtraProps]\n    )\n","import { createElement, useMemo } from 'react'\nimport { PropertyAccessor, usePropertyAccessor, radiansToDegrees, useTheme } from '@nivo/core'\nimport { useInheritedColor } from '@nivo/colors'\nimport { useArcCentersTransition } from '../centers'\nimport { ArcTransitionMode } from '../arcTransitionMode'\nimport { DatumWithArcAndColor } from '../types'\nimport { ArcLabelsProps } from './props'\nimport { ArcLabel, ArcLabelProps } from './ArcLabel'\n\nexport type ArcLabelComponent<Datum extends DatumWithArcAndColor> = (\n    props: ArcLabelProps<Datum>\n) => JSX.Element\n\ninterface ArcLabelsLayerProps<Datum extends DatumWithArcAndColor> {\n    center: [number, number]\n    data: Datum[]\n    label: PropertyAccessor<Datum, string>\n    radiusOffset: ArcLabelsProps<Datum>['arcLabelsRadiusOffset']\n    skipAngle: ArcLabelsProps<Datum>['arcLabelsSkipAngle']\n    textColor: ArcLabelsProps<Datum>['arcLabelsTextColor']\n    transitionMode: ArcTransitionMode\n    component?: ArcLabelsProps<Datum>['arcLabelsComponent']\n}\n\nexport const ArcLabelsLayer = <Datum extends DatumWithArcAndColor>({\n    center,\n    data,\n    transitionMode,\n    label: labelAccessor,\n    radiusOffset,\n    skipAngle,\n    textColor,\n    component = ArcLabel,\n}: ArcLabelsLayerProps<Datum>) => {\n    const getLabel = usePropertyAccessor<Datum, string>(labelAccessor)\n    const theme = useTheme()\n    const getTextColor = useInheritedColor<Datum>(textColor, theme)\n\n    const filteredData = useMemo(\n        () =>\n            data.filter(datum => {\n                return (\n                    Math.abs(radiansToDegrees(datum.arc.endAngle - datum.arc.startAngle)) >=\n                    skipAngle\n                )\n            }),\n        [data, skipAngle]\n    )\n\n    const { transition, interpolate } = useArcCentersTransition<Datum>(\n        filteredData,\n        radiusOffset,\n        transitionMode\n    )\n\n    const Label: ArcLabelComponent<Datum> = component\n\n    return (\n        <g transform={`translate(${center[0]},${center[1]})`}>\n            {transition((transitionProps, datum) => {\n                return createElement(Label, {\n                    key: datum.id,\n                    datum,\n                    label: getLabel(datum),\n                    style: {\n                        ...transitionProps,\n                        transform: interpolate(\n                            transitionProps.startAngle,\n                            transitionProps.endAngle,\n                            transitionProps.innerRadius,\n                            transitionProps.outerRadius\n                        ),\n                        textColor: getTextColor(datum),\n                    },\n                })\n            })}\n        </g>\n    )\n}\n","import { CompleteTheme } from '@nivo/core'\nimport { DatumWithArcAndColor } from '../types'\nimport { ArcLabel } from './useArcLabels'\n\nexport const drawCanvasArcLabels = <Datum extends DatumWithArcAndColor>(\n    ctx: CanvasRenderingContext2D,\n    labels: ArcLabel<Datum>[],\n    theme: CompleteTheme\n) => {\n    ctx.textAlign = 'center'\n    ctx.textBaseline = 'middle'\n    ctx.font = `${theme.labels.text.fontSize}px ${theme.labels.text.fontFamily}`\n\n    labels.forEach(label => {\n        ctx.fillStyle = label.textColor\n        ctx.fillText(`${label.label}`, label.x, label.y)\n    })\n}\n","import { useCallback } from 'react'\nimport { PropertyAccessor, usePropertyAccessor, useTheme } from '@nivo/core'\nimport { InheritedColorConfig, useInheritedColor } from '@nivo/colors'\nimport { DatumWithArcAndColor } from '../types'\nimport { useArcCenters, ArcCenter } from '../centers'\n\nexport interface ArcLabel<Datum extends DatumWithArcAndColor> extends ArcCenter<Datum> {\n    label: string\n    textColor: string\n}\n\n/**\n * Compute arc labels, please note that the datum should\n * contain a color in order to be able to compute the label text color.\n *\n * Please see `useArcCenters` for a more detailed explanation\n * about the parameters.\n */\nexport const useArcLabels = <Datum extends DatumWithArcAndColor>({\n    data,\n    offset,\n    skipAngle,\n    label,\n    textColor,\n}: {\n    data: Datum[]\n    offset?: number\n    skipAngle?: number\n    label: PropertyAccessor<Datum, string>\n    textColor: InheritedColorConfig<Datum>\n}) => {\n    const getLabel = usePropertyAccessor<Datum, string>(label)\n\n    const theme = useTheme()\n    const getTextColor = useInheritedColor<Datum>(textColor, theme)\n\n    const computeExtraProps = useCallback(\n        (datum: Datum) => {\n            return {\n                label: getLabel(datum),\n                textColor: getTextColor(datum),\n            }\n        },\n        [getLabel, getTextColor]\n    )\n\n    return useArcCenters<Datum, Omit<ArcLabel<Datum>, keyof ArcCenter<Datum>>>({\n        data,\n        offset,\n        skipAngle,\n        computeExtraProps,\n    })\n}\n","import { ArcLabel } from './ArcLabel'\n\nexport const ArcLabelComponent = ArcLabel\nexport * from './ArcLabelsLayer'\nexport * from './canvas'\nexport * from './props'\nexport * from './useArcLabels'\n","import { useTheme } from '@nivo/core'\nimport { SpringValue, Interpolation, animated } from '@react-spring/web'\nimport { DatumWithArcAndColor } from '../types'\n\nexport interface ArcLinkLabelProps<Datum extends DatumWithArcAndColor> {\n    datum: Datum\n    label: string\n    style: {\n        path: Interpolation<string>\n        thickness: number\n        textPosition: Interpolation<string>\n        textAnchor: Interpolation<'start' | 'end'>\n        linkColor: SpringValue<string>\n        opacity: SpringValue<number>\n        textColor: SpringValue<string>\n    }\n}\n\nexport const ArcLinkLabel = <Datum extends DatumWithArcAndColor>({\n    label,\n    style,\n}: ArcLinkLabelProps<Datum>) => {\n    const theme = useTheme()\n\n    return (\n        <animated.g opacity={style.opacity}>\n            <animated.path\n                fill=\"none\"\n                stroke={style.linkColor}\n                strokeWidth={style.thickness}\n                d={style.path}\n            />\n            <animated.text\n                transform={style.textPosition}\n                textAnchor={style.textAnchor}\n                dominantBaseline=\"central\"\n                style={{\n                    ...theme.labels.text,\n                    fill: style.textColor,\n                }}\n            >\n                {label}\n            </animated.text>\n        </animated.g>\n    )\n}\n","import { positionFromAngle } from '@nivo/core'\nimport { Arc, Point } from '../types'\nimport { getNormalizedAngle } from '../utils'\nimport { ArcLink } from './types'\n\n/**\n * Compute text anchor for a given arc.\n *\n * `computeArcLink` already computes a `side`, but when using\n * `react-spring`, you cannot have a single interpolation\n * returning several output values, so we need to compute\n * them in separate interpolations.\n */\nexport const computeArcLinkTextAnchor = (arc: Arc): 'start' | 'end' => {\n    const centerAngle = getNormalizedAngle(\n        arc.startAngle + (arc.endAngle - arc.startAngle) / 2 - Math.PI / 2\n    )\n\n    if (centerAngle < Math.PI / 2 || centerAngle > Math.PI * 1.5) {\n        return 'start'\n    }\n\n    return 'end'\n}\n\n/**\n * Compute the link of a single arc, returning its points,\n * please note that points coordinates are relative to\n * the center of the arc.\n */\nexport const computeArcLink = (\n    arc: Arc,\n    offset: number,\n    diagonalLength: number,\n    straightLength: number\n): ArcLink => {\n    const centerAngle = getNormalizedAngle(\n        arc.startAngle + (arc.endAngle - arc.startAngle) / 2 - Math.PI / 2\n    )\n    const point0: Point = positionFromAngle(centerAngle, arc.outerRadius + offset)\n    const point1: Point = positionFromAngle(centerAngle, arc.outerRadius + offset + diagonalLength)\n\n    let side: ArcLink['side']\n    let point2: Point\n    if (centerAngle < Math.PI / 2 || centerAngle > Math.PI * 1.5) {\n        side = 'after'\n        point2 = {\n            x: point1.x + straightLength,\n            y: point1.y,\n        }\n    } else {\n        side = 'before'\n        point2 = {\n            x: point1.x - straightLength,\n            y: point1.y,\n        }\n    }\n\n    return {\n        side,\n        points: [point0, point1, point2],\n    }\n}\n","import { useMemo } from 'react'\nimport { SpringValue, useTransition, to } from '@react-spring/web'\nimport { line } from 'd3-shape'\nimport { useMotionConfig, useTheme } from '@nivo/core'\nimport { InheritedColorConfig, useInheritedColor } from '@nivo/colors'\nimport { DatumWithArcAndColor, Point } from '../types'\nimport { useFilteredDataBySkipAngle } from '../utils'\nimport { computeArcLink, computeArcLinkTextAnchor } from './compute'\n\nconst lineGenerator = line<Point>()\n    .x(d => d.x)\n    .y(d => d.y)\n\ntype AnimatedProps = {\n    startAngle: number\n    endAngle: number\n    innerRadius: number\n    outerRadius: number\n    offset: number\n    diagonalLength: number\n    straightLength: number\n    textOffset: number\n    linkColor: string\n    textColor: string\n    opacity: number\n}\n\nconst useTransitionPhases = <Datum extends DatumWithArcAndColor>({\n    offset,\n    diagonalLength,\n    straightLength,\n    textOffset,\n    getLinkColor,\n    getTextColor,\n}: Pick<AnimatedProps, 'offset' | 'diagonalLength' | 'straightLength' | 'textOffset'> & {\n    getLinkColor: (datum: Datum) => string\n    getTextColor: (datum: Datum) => string\n}): Record<'enter' | 'update' | 'leave', (datum: Datum) => AnimatedProps> =>\n    useMemo(\n        () => ({\n            enter: (datum: Datum) => ({\n                startAngle: datum.arc.startAngle,\n                endAngle: datum.arc.endAngle,\n                innerRadius: datum.arc.innerRadius,\n                outerRadius: datum.arc.outerRadius,\n                offset,\n                diagonalLength: 0,\n                straightLength: 0,\n                textOffset,\n                linkColor: getLinkColor(datum),\n                textColor: getTextColor(datum),\n                opacity: 0,\n            }),\n            update: (d: Datum) => ({\n                startAngle: d.arc.startAngle,\n                endAngle: d.arc.endAngle,\n                innerRadius: d.arc.innerRadius,\n                outerRadius: d.arc.outerRadius,\n                offset,\n                diagonalLength,\n                straightLength,\n                textOffset,\n                linkColor: getLinkColor(d),\n                textColor: getTextColor(d),\n                opacity: 1,\n            }),\n            leave: (d: Datum) => ({\n                startAngle: d.arc.startAngle,\n                endAngle: d.arc.endAngle,\n                innerRadius: d.arc.innerRadius,\n                outerRadius: d.arc.outerRadius,\n                offset,\n                diagonalLength: 0,\n                straightLength: 0,\n                textOffset,\n                linkColor: getLinkColor(d),\n                textColor: getTextColor(d),\n                opacity: 0,\n            }),\n        }),\n        [diagonalLength, straightLength, textOffset, getLinkColor, getTextColor]\n    )\n\nconst interpolateLink = (\n    startAngleValue: SpringValue<AnimatedProps['startAngle']>,\n    endAngleValue: SpringValue<AnimatedProps['endAngle']>,\n    innerRadiusValue: SpringValue<AnimatedProps['innerRadius']>,\n    outerRadiusValue: SpringValue<AnimatedProps['outerRadius']>,\n    offsetValue: SpringValue<AnimatedProps['offset']>,\n    diagonalLengthValue: SpringValue<AnimatedProps['diagonalLength']>,\n    straightLengthValue: SpringValue<AnimatedProps['straightLength']>\n) =>\n    to(\n        [\n            startAngleValue,\n            endAngleValue,\n            innerRadiusValue,\n            outerRadiusValue,\n            offsetValue,\n            diagonalLengthValue,\n            straightLengthValue,\n        ],\n        (\n            startAngle,\n            endAngle,\n            innerRadius,\n            outerRadius,\n            offset,\n            diagonalLengthAnimated,\n            straightLengthAnimated\n        ) => {\n            const { points } = computeArcLink(\n                {\n                    startAngle,\n                    endAngle,\n                    innerRadius,\n                    outerRadius,\n                },\n                offset,\n                diagonalLengthAnimated,\n                straightLengthAnimated\n            )\n\n            return lineGenerator(points)\n        }\n    )\n\nconst interpolateTextAnchor = (\n    startAngleValue: SpringValue<AnimatedProps['startAngle']>,\n    endAngleValue: SpringValue<AnimatedProps['endAngle']>,\n    innerRadiusValue: SpringValue<AnimatedProps['innerRadius']>,\n    outerRadiusValue: SpringValue<AnimatedProps['outerRadius']>\n) =>\n    to(\n        [startAngleValue, endAngleValue, innerRadiusValue, outerRadiusValue],\n        (startAngle, endAngle, innerRadius, outerRadius) => {\n            return computeArcLinkTextAnchor({\n                startAngle,\n                endAngle,\n                innerRadius,\n                outerRadius,\n            })\n        }\n    )\n\n/**\n * Interpolating the text position involves almost the same computation\n * as `interpolateLink`, unfortunately `react-spring` does not support\n * multiple output values from a single interpolation.\n *\n * We should revise this if `react-spring` adds this feature at some point.\n */\nconst interpolateTextPosition = (\n    startAngleValue: SpringValue<AnimatedProps['startAngle']>,\n    endAngleValue: SpringValue<AnimatedProps['endAngle']>,\n    innerRadiusValue: SpringValue<AnimatedProps['innerRadius']>,\n    outerRadiusValue: SpringValue<AnimatedProps['outerRadius']>,\n    offsetValue: SpringValue<AnimatedProps['offset']>,\n    diagonalLengthValue: SpringValue<AnimatedProps['diagonalLength']>,\n    straightLengthValue: SpringValue<AnimatedProps['straightLength']>,\n    textOffsetValue: SpringValue<AnimatedProps['textOffset']>\n) =>\n    to(\n        [\n            startAngleValue,\n            endAngleValue,\n            innerRadiusValue,\n            outerRadiusValue,\n            offsetValue,\n            diagonalLengthValue,\n            straightLengthValue,\n            textOffsetValue,\n        ],\n        (\n            startAngle,\n            endAngle,\n            innerRadius,\n            outerRadius,\n            offset,\n            diagonalLengthAnimated,\n            straightLengthAnimated,\n            textOffset\n        ) => {\n            const { points, side } = computeArcLink(\n                {\n                    startAngle,\n                    endAngle,\n                    innerRadius,\n                    outerRadius,\n                },\n                offset,\n                diagonalLengthAnimated,\n                straightLengthAnimated\n            )\n\n            const position = points[2]\n            if (side === 'before') {\n                position.x -= textOffset\n            } else {\n                position.x += textOffset\n            }\n\n            return `translate(${position.x},${position.y})`\n        }\n    )\n\n/**\n * This hook can be used to animate a group of arc link labels,\n * if you just want to compute the labels, please use `useArcLinkLabels`.\n */\nexport const useArcLinkLabelsTransition = <Datum extends DatumWithArcAndColor>({\n    data,\n    offset = 0,\n    diagonalLength,\n    straightLength,\n    skipAngle = 0,\n    textOffset,\n    linkColor,\n    textColor,\n}: {\n    data: Datum[]\n    offset?: number\n    diagonalLength: number\n    straightLength: number\n    skipAngle?: number\n    textOffset: number\n    linkColor: InheritedColorConfig<Datum>\n    textColor: InheritedColorConfig<Datum>\n}) => {\n    const { animate, config: springConfig } = useMotionConfig()\n\n    const theme = useTheme()\n    const getLinkColor = useInheritedColor<Datum>(linkColor, theme)\n    const getTextColor = useInheritedColor<Datum>(textColor, theme)\n\n    const filteredData = useFilteredDataBySkipAngle<Datum>(data, skipAngle)\n    const transitionPhases = useTransitionPhases<Datum>({\n        offset,\n        diagonalLength,\n        straightLength,\n        textOffset,\n        getLinkColor,\n        getTextColor,\n    })\n\n    const transition = useTransition<Datum, AnimatedProps>(filteredData, {\n        keys: datum => datum.id,\n        initial: transitionPhases.update,\n        from: transitionPhases.enter,\n        enter: transitionPhases.update,\n        update: transitionPhases.update,\n        leave: transitionPhases.leave,\n        config: springConfig,\n        immediate: !animate,\n    })\n\n    return {\n        transition,\n        interpolateLink,\n        interpolateTextAnchor,\n        interpolateTextPosition,\n    }\n}\n","import { createElement } from 'react'\nimport { usePropertyAccessor } from '@nivo/core'\nimport { DatumWithArcAndColor } from '../types'\nimport { useArcLinkLabelsTransition } from './useArcLinkLabelsTransition'\nimport { ArcLinkLabelsProps } from './props'\nimport { ArcLinkLabel, ArcLinkLabelProps } from './ArcLinkLabel'\n\nexport type ArcLinkLabelComponent<Datum extends DatumWithArcAndColor> = (\n    props: ArcLinkLabelProps<Datum>\n) => JSX.Element\n\ninterface ArcLinkLabelsLayerProps<Datum extends DatumWithArcAndColor> {\n    center: [number, number]\n    data: Datum[]\n    label: ArcLinkLabelsProps<Datum>['arcLinkLabel']\n    skipAngle: ArcLinkLabelsProps<Datum>['arcLinkLabelsSkipAngle']\n    offset: ArcLinkLabelsProps<Datum>['arcLinkLabelsOffset']\n    diagonalLength: ArcLinkLabelsProps<Datum>['arcLinkLabelsDiagonalLength']\n    straightLength: ArcLinkLabelsProps<Datum>['arcLinkLabelsStraightLength']\n    strokeWidth: ArcLinkLabelsProps<Datum>['arcLinkLabelsThickness']\n    textOffset: ArcLinkLabelsProps<Datum>['arcLinkLabelsTextOffset']\n    textColor: ArcLinkLabelsProps<Datum>['arcLinkLabelsTextColor']\n    linkColor: ArcLinkLabelsProps<Datum>['arcLinkLabelsColor']\n    component?: ArcLinkLabelComponent<Datum>\n}\n\nexport const ArcLinkLabelsLayer = <Datum extends DatumWithArcAndColor>({\n    center,\n    data,\n    label: labelAccessor,\n    skipAngle,\n    offset,\n    diagonalLength,\n    straightLength,\n    strokeWidth,\n    textOffset,\n    textColor,\n    linkColor,\n    component = ArcLinkLabel,\n}: ArcLinkLabelsLayerProps<Datum>) => {\n    const getLabel = usePropertyAccessor<Datum, string>(labelAccessor)\n\n    const { transition, interpolateLink, interpolateTextAnchor, interpolateTextPosition } =\n        useArcLinkLabelsTransition<Datum>({\n            data,\n            skipAngle,\n            offset,\n            diagonalLength,\n            straightLength,\n            textOffset,\n            linkColor,\n            textColor,\n        })\n\n    const Label: ArcLinkLabelComponent<Datum> = component\n\n    return (\n        <g transform={`translate(${center[0]},${center[1]})`}>\n            {transition((transitionProps, datum) => {\n                return createElement(Label, {\n                    key: datum.id,\n                    datum,\n                    label: getLabel(datum),\n                    style: {\n                        ...transitionProps,\n                        thickness: strokeWidth,\n                        path: interpolateLink(\n                            transitionProps.startAngle,\n                            transitionProps.endAngle,\n                            transitionProps.innerRadius,\n                            transitionProps.outerRadius,\n                            transitionProps.offset,\n                            transitionProps.diagonalLength,\n                            transitionProps.straightLength\n                        ),\n                        textAnchor: interpolateTextAnchor(\n                            transitionProps.startAngle,\n                            transitionProps.endAngle,\n                            transitionProps.innerRadius,\n                            transitionProps.outerRadius\n                        ),\n                        textPosition: interpolateTextPosition(\n                            transitionProps.startAngle,\n                            transitionProps.endAngle,\n                            transitionProps.innerRadius,\n                            transitionProps.outerRadius,\n                            transitionProps.offset,\n                            transitionProps.diagonalLength,\n                            transitionProps.straightLength,\n                            transitionProps.textOffset\n                        ),\n                    },\n                })\n            })}\n        </g>\n    )\n}\n","import {\n    // @ts-ignore\n    textPropsByEngine,\n    CompleteTheme,\n} from '@nivo/core'\nimport { DatumWithArcAndColor } from '../types'\nimport { ArcLinkLabel } from './types'\n\nexport const drawCanvasArcLinkLabels = <Datum extends DatumWithArcAndColor>(\n    ctx: CanvasRenderingContext2D,\n    labels: ArcLinkLabel<Datum>[],\n    theme: CompleteTheme,\n    strokeWidth: number\n) => {\n    ctx.textBaseline = 'middle'\n    ctx.font = `${theme.labels.text.fontSize}px ${theme.labels.text.fontFamily}`\n\n    labels.forEach(label => {\n        ctx.fillStyle = label.textColor\n        ctx.textAlign = textPropsByEngine.canvas.align[label.textAnchor]\n        ctx.fillText(`${label.label}`, label.x, label.y)\n\n        ctx.beginPath()\n        ctx.strokeStyle = label.linkColor\n        ctx.lineWidth = strokeWidth\n        label.points.forEach((point, index) => {\n            if (index === 0) ctx.moveTo(point.x, point.y)\n            else ctx.lineTo(point.x, point.y)\n        })\n        ctx.stroke()\n    })\n}\n","import { useMemo } from 'react'\nimport { radiansToDegrees } from '@nivo/core'\nimport { DatumWithArc } from '../types'\nimport { ArcLinkWithDatum } from './types'\nimport { computeArcLink } from './compute'\n\n/**\n * Compute links for an array of data containing arcs.\n *\n * This is typically used to create labels for arcs,\n * and it's used for the `useArcLinkLabels` hook.\n */\nexport const useArcLinks = <\n    Datum extends DatumWithArc,\n    ExtraProps extends Record<string, any> = Record<string, any>\n>({\n    data,\n    skipAngle = 0,\n    offset = 0.5,\n    diagonalLength,\n    straightLength,\n    computeExtraProps = () => ({} as ExtraProps),\n}: {\n    data: Datum[]\n    // arcs with a length below this (end angle - start angle in degrees)\n    // are going to be excluded, this can typically be used to avoid having\n    // overlapping labels.\n    skipAngle?: number\n    // offset from arc outer radius in pixels\n    offset?: number\n    // length of the diagonal segment of the link\n    diagonalLength: number\n    // length of the straight segment of the link\n    straightLength: number\n    // this can be used to append extra properties to the links,\n    // can be used to compute a color/label for example.\n    computeExtraProps?: (datum: ArcLinkWithDatum<Datum>) => ExtraProps\n}): (ArcLinkWithDatum<Datum> & ExtraProps)[] => {\n    const links = useMemo(\n        () =>\n            data\n                // filter out arcs with a length below `skipAngle`\n                .filter(\n                    datum =>\n                        Math.abs(radiansToDegrees(datum.arc.endAngle - datum.arc.startAngle)) >=\n                        skipAngle\n                )\n                // compute the link for each eligible arc\n                .map(datum => ({\n                    ...computeArcLink(datum.arc, offset, diagonalLength, straightLength),\n                    data: datum,\n                })),\n        [data, skipAngle, offset, diagonalLength, straightLength]\n    )\n\n    // splitting memoization of links and extra props can be more efficient,\n    // this way if only `computeExtraProps` changes, we skip links computation.\n    return useMemo(\n        () =>\n            links.map(link => ({\n                ...computeExtraProps(link),\n                ...link,\n            })),\n        [links, computeExtraProps]\n    )\n}\n","import { useCallback } from 'react'\nimport { PropertyAccessor, usePropertyAccessor, useTheme } from '@nivo/core'\nimport { InheritedColorConfig, useInheritedColor } from '@nivo/colors'\nimport { DatumWithArcAndColor } from '../types'\nimport { ArcLinkWithDatum, ArcLinkLabel } from './types'\nimport { useArcLinks } from './useArcLinks'\n\n/**\n * Compute arc link labels, please note that the datum should\n * contain a color in order to be able to compute the link/label text color.\n *\n * Please see `useArcLinks` for a more detailed explanation\n * about the parameters.\n */\nexport const useArcLinkLabels = <Datum extends DatumWithArcAndColor>({\n    data,\n    skipAngle,\n    offset,\n    diagonalLength,\n    straightLength,\n    textOffset = 0,\n    label,\n    linkColor,\n    textColor,\n}: {\n    data: Datum[]\n    skipAngle?: number\n    offset?: number\n    diagonalLength: number\n    straightLength: number\n    textOffset: number\n    label: PropertyAccessor<Datum, string>\n    linkColor: InheritedColorConfig<Datum>\n    textColor: InheritedColorConfig<Datum>\n}) => {\n    const getLabel = usePropertyAccessor<Datum, string>(label)\n\n    const theme = useTheme()\n    const getLinkColor = useInheritedColor<Datum>(linkColor, theme)\n    const getTextColor = useInheritedColor<Datum>(textColor, theme)\n\n    const computeExtraProps = useCallback(\n        (link: ArcLinkWithDatum<Datum>) => {\n            const position = {\n                x: link.points[2].x,\n                y: link.points[2].y,\n            }\n            let textAnchor: ArcLinkLabel<Datum>['textAnchor']\n            if (link.side === 'before') {\n                position.x -= textOffset\n                textAnchor = 'end'\n            } else {\n                position.x += textOffset\n                textAnchor = 'start'\n            }\n\n            return {\n                ...position,\n                label: getLabel(link.data),\n                linkColor: getLinkColor(link.data),\n                textAnchor,\n                textColor: getTextColor(link.data),\n            }\n        },\n        [getLabel, getLinkColor, getTextColor, textOffset]\n    )\n\n    return useArcLinks<Datum, Omit<ArcLinkLabel<Datum>, keyof ArcLinkWithDatum<Datum>>>({\n        data,\n        skipAngle,\n        offset,\n        diagonalLength,\n        straightLength,\n        computeExtraProps,\n    })\n}\n","import { ArcLinkLabel } from './ArcLinkLabel'\n\nexport const ArcLinkLabelComponent = ArcLinkLabel\nexport * from './ArcLinkLabelsLayer'\nexport * from './canvas'\nexport * from './compute'\nexport * from './props'\nexport * from './types'\nexport * from './useArcLinkLabels'\nexport * from './useArcLinkLabelsTransition'\nexport * from './useArcLinks'\n","import { animated, to, AnimatedProps } from '@react-spring/web'\nimport { ExtractProps } from '@nivo/core'\nimport { generateSvgArc } from './utils'\n\ntype ArcLineProps = {\n    animated: AnimatedProps<{\n        radius: number\n        startAngle: number\n        endAngle: number\n        opacity: number\n    }>\n} & ExtractProps<typeof animated.path>\n\nexport const ArcLine = ({ animated: animatedProps, ...rest }: ArcLineProps) => (\n    <animated.path\n        d={to(\n            [animatedProps.radius, animatedProps.startAngle, animatedProps.endAngle],\n            (radius, start, end) => generateSvgArc(radius, start, end)\n        )}\n        {...rest}\n    />\n)\n","import { useCallback } from 'react'\nimport * as React from 'react'\nimport { SpringValue, Interpolation, animated } from '@react-spring/web'\nimport { DatumWithArcAndColor } from './types'\n\nexport type ArcMouseHandler<Datum extends DatumWithArcAndColor> = (\n    datum: Datum,\n    event: React.MouseEvent<SVGPathElement>\n) => void\n\nexport interface ArcShapeProps<Datum extends DatumWithArcAndColor> {\n    datum: Datum\n    style: {\n        opacity: SpringValue<number>\n        color: SpringValue<string>\n        borderWidth: number\n        borderColor: SpringValue<string>\n        path: Interpolation<string>\n    }\n    onClick?: ArcMouseHandler<Datum>\n    onMouseEnter?: ArcMouseHandler<Datum>\n    onMouseMove?: ArcMouseHandler<Datum>\n    onMouseLeave?: ArcMouseHandler<Datum>\n}\n\n/**\n * A simple arc component to be used typically with an `ArcsLayer`.\n *\n * Please note that the component accepts `SpringValue`s instead of\n * regular values to support animations.\n */\nexport const ArcShape = <Datum extends DatumWithArcAndColor>({\n    datum,\n    style,\n    onClick,\n    onMouseEnter,\n    onMouseMove,\n    onMouseLeave,\n}: ArcShapeProps<Datum>) => {\n    const handleClick = useCallback(event => onClick?.(datum, event), [onClick, datum])\n\n    const handleMouseEnter = useCallback(\n        event => onMouseEnter?.(datum, event),\n        [onMouseEnter, datum]\n    )\n\n    const handleMouseMove = useCallback(event => onMouseMove?.(datum, event), [onMouseMove, datum])\n\n    const handleMouseLeave = useCallback(\n        event => onMouseLeave?.(datum, event),\n        [onMouseLeave, datum]\n    )\n\n    return (\n        <animated.path\n            d={style.path}\n            opacity={style.opacity}\n            fill={datum.fill || style.color}\n            stroke={style.borderColor}\n            strokeWidth={style.borderWidth}\n            onClick={onClick ? handleClick : undefined}\n            onMouseEnter={onMouseEnter ? handleMouseEnter : undefined}\n            onMouseMove={onMouseMove ? handleMouseMove : undefined}\n            onMouseLeave={onMouseLeave ? handleMouseLeave : undefined}\n        />\n    )\n}\n","import { to, SpringValue } from '@react-spring/web'\nimport { ArcGenerator } from './types'\n\n/**\n * Directly animating paths for arcs leads to sub-optimal results\n * as the interpolation is going to be linear while we deal with polar coordinates,\n * this interpolator is going to generate proper arc transitions.\n * It should be used with the `useAnimatedArc` or `useArcsTransition` hooks.\n */\nexport const interpolateArc = (\n    startAngleValue: SpringValue<number>,\n    endAngleValue: SpringValue<number>,\n    innerRadiusValue: SpringValue<number>,\n    outerRadiusValue: SpringValue<number>,\n    arcGenerator: ArcGenerator\n) =>\n    to(\n        [startAngleValue, endAngleValue, innerRadiusValue, outerRadiusValue],\n        (startAngle, endAngle, innerRadius, outerRadius) => {\n            return arcGenerator({\n                startAngle,\n                endAngle,\n                innerRadius: Math.max(0, innerRadius),\n                outerRadius: Math.max(0, outerRadius),\n            })\n        }\n    )\n","import { useTransition } from '@react-spring/web'\nimport { useMotionConfig } from '@nivo/core'\nimport { DatumWithArc } from './types'\nimport { ArcTransitionMode, useArcTransitionMode, TransitionExtra } from './arcTransitionMode'\nimport { interpolateArc } from './interpolateArc'\n\n/**\n * This hook can be used to animate a group of arcs,\n * if you want to animate a single arc,\n * please have a look at the `useAnimatedArc` hook.\n */\nexport const useArcsTransition = <Datum extends DatumWithArc, ExtraProps = unknown>(\n    data: Datum[],\n    mode: ArcTransitionMode = 'innerRadius',\n    extra?: TransitionExtra<Datum, ExtraProps>\n) => {\n    const { animate, config: springConfig } = useMotionConfig()\n\n    const phases = useArcTransitionMode<Datum, ExtraProps>(mode, extra)\n\n    const transition = useTransition<\n        Datum,\n        {\n            progress: number\n            startAngle: number\n            endAngle: number\n            innerRadius: number\n            outerRadius: number\n        } & ExtraProps\n    >(data, {\n        keys: datum => datum.id,\n        initial: phases.update,\n        from: phases.enter,\n        enter: phases.update,\n        update: phases.update,\n        leave: phases.leave,\n        config: springConfig,\n        immediate: !animate,\n    })\n\n    return {\n        transition,\n        interpolate: interpolateArc,\n    }\n}\n","import { createElement } from 'react'\nimport { useTheme } from '@nivo/core'\nimport { InheritedColorConfig, useInheritedColor } from '@nivo/colors'\nimport { DatumWithArcAndColor, ArcGenerator } from './types'\nimport { useArcsTransition } from './useArcsTransition'\nimport { ArcTransitionMode } from './arcTransitionMode'\nimport { ArcMouseHandler, ArcShape, ArcShapeProps } from './ArcShape'\n\nexport type ArcComponent<Datum extends DatumWithArcAndColor> = (\n    props: ArcShapeProps<Datum>\n) => JSX.Element\n\ninterface ArcsLayerProps<Datum extends DatumWithArcAndColor> {\n    center: [number, number]\n    data: Datum[]\n    arcGenerator: ArcGenerator\n    borderWidth: number\n    borderColor: InheritedColorConfig<Datum>\n    onClick?: ArcMouseHandler<Datum>\n    onMouseEnter?: ArcMouseHandler<Datum>\n    onMouseMove?: ArcMouseHandler<Datum>\n    onMouseLeave?: ArcMouseHandler<Datum>\n    transitionMode: ArcTransitionMode\n    component?: ArcComponent<Datum>\n}\n\nexport const ArcsLayer = <Datum extends DatumWithArcAndColor>({\n    center,\n    data,\n    arcGenerator,\n    borderWidth,\n    borderColor,\n    onClick,\n    onMouseEnter,\n    onMouseMove,\n    onMouseLeave,\n    transitionMode,\n    component = ArcShape,\n}: ArcsLayerProps<Datum>) => {\n    const theme = useTheme()\n    const getBorderColor = useInheritedColor<Datum>(borderColor, theme)\n\n    const { transition, interpolate } = useArcsTransition<\n        Datum,\n        {\n            opacity: number\n            color: string\n            borderColor: string\n        }\n    >(data, transitionMode, {\n        enter: datum => ({\n            opacity: 0,\n            color: datum.color,\n            borderColor: getBorderColor(datum),\n        }),\n        update: datum => ({\n            opacity: 1,\n            color: datum.color,\n            borderColor: getBorderColor(datum),\n        }),\n        leave: datum => ({\n            opacity: 0,\n            color: datum.color,\n            borderColor: getBorderColor(datum),\n        }),\n    })\n\n    const Arc: ArcComponent<Datum> = component\n\n    return (\n        <g transform={`translate(${center[0]},${center[1]})`}>\n            {transition((transitionProps, datum) => {\n                return createElement(Arc, {\n                    key: datum.id,\n                    datum,\n                    style: {\n                        ...transitionProps,\n                        borderWidth,\n                        path: interpolate(\n                            transitionProps.startAngle,\n                            transitionProps.endAngle,\n                            transitionProps.innerRadius,\n                            transitionProps.outerRadius,\n                            arcGenerator\n                        ),\n                    },\n                    onClick,\n                    onMouseEnter,\n                    onMouseMove,\n                    onMouseLeave,\n                })\n            })}\n        </g>\n    )\n}\n","import { positionFromAngle, degreesToRadians } from '@nivo/core'\n\n/**\n * Computes the bounding box for a circle arc.\n *\n * Assumptions:\n *   - Anywhere the arc intersects an axis will be a max or a min.\n *   - If the arc doesn't intersect an axis, then the center\n *     will be one corner of the bounding rectangle,\n *     and this is the only case when it will be.\n *   - The only other possible extreme points of the sector to consider\n *     are the endpoints of the radii.\n *\n * This script was built within the help of this answer on stackoverflow:\n *   https://stackoverflow.com/questions/1336663/2d-bounding-box-of-a-sector\n */\nexport const computeArcBoundingBox = (\n    centerX: number,\n    centerY: number,\n    radius: number,\n    // in degrees\n    startAngle: number,\n    // in degrees\n    endAngle: number,\n    includeCenter = true\n) => {\n    let points: [number, number][] = []\n\n    const p0 = positionFromAngle(degreesToRadians(startAngle), radius)\n    points.push([p0.x, p0.y])\n\n    const p1 = positionFromAngle(degreesToRadians(endAngle), radius)\n    points.push([p1.x, p1.y])\n\n    for (\n        let angle = Math.round(Math.min(startAngle, endAngle));\n        angle <= Math.round(Math.max(startAngle, endAngle));\n        angle++\n    ) {\n        if (angle % 90 === 0) {\n            const p = positionFromAngle(degreesToRadians(angle), radius)\n            points.push([p.x, p.y])\n        }\n    }\n\n    points = points.map(([x, y]) => [centerX + x, centerY + y])\n    if (includeCenter) {\n        points.push([centerX, centerY])\n    }\n\n    const xs = points.map(([x]) => x)\n    const ys = points.map(([, y]) => y)\n\n    const x0 = Math.min(...xs)\n    const x1 = Math.max(...xs)\n\n    const y0 = Math.min(...ys)\n    const y1 = Math.max(...ys)\n\n    return {\n        points,\n        x: x0,\n        y: y0,\n        width: x1 - x0,\n        height: y1 - y0,\n    }\n}\n","import { getDistance, getAngle } from '@nivo/core'\nimport { Arc } from './types'\n\n/**\n * Check if cursor is in given ring.\n */\nexport const isCursorInRing = (\n    centerX: number,\n    centerY: number,\n    radius: number,\n    innerRadius: number,\n    cursorX: number,\n    cursorY: number\n) => {\n    const distance = getDistance(cursorX, cursorY, centerX, centerY)\n\n    return distance < radius && distance > innerRadius\n}\n\n/**\n * Search for an arc being under cursor.\n */\nexport const findArcUnderCursor = <A extends Arc = Arc>(\n    centerX: number,\n    centerY: number,\n    radius: number,\n    innerRadius: number,\n    arcs: A[],\n    cursorX: number,\n    cursorY: number\n): A | undefined => {\n    if (!isCursorInRing(centerX, centerY, radius, innerRadius, cursorX, cursorY)) {\n        return undefined\n    }\n\n    const cursorAngle = getAngle(cursorX, cursorY, centerX, centerY)\n\n    return arcs.find(\n        ({ startAngle, endAngle }) => cursorAngle >= startAngle && cursorAngle < endAngle\n    )\n}\n","import { useSpring } from '@react-spring/web'\nimport { useMotionConfig } from '@nivo/core'\nimport { Arc, ArcGenerator } from './types'\nimport { interpolateArc } from './interpolateArc'\n\n/**\n * This hook can be used to animate a single arc,\n * if you want to animate a group of arcs,\n * please have a look at the `useArcsTransition` hook.\n */\nexport const useAnimatedArc = (datumWithArc: { arc: Arc }, arcGenerator: ArcGenerator) => {\n    const { animate, config: springConfig } = useMotionConfig()\n\n    const animatedValues = useSpring({\n        startAngle: datumWithArc.arc.startAngle,\n        endAngle: datumWithArc.arc.endAngle,\n        innerRadius: datumWithArc.arc.innerRadius,\n        outerRadius: datumWithArc.arc.outerRadius,\n        config: springConfig,\n        immediate: !animate,\n    })\n\n    return {\n        ...animatedValues,\n        path: interpolateArc(\n            animatedValues.startAngle,\n            animatedValues.endAngle,\n            animatedValues.innerRadius,\n            animatedValues.outerRadius,\n            arcGenerator\n        ),\n    }\n}\n","import { useMemo } from 'react'\nimport { arc as d3Arc } from 'd3-shape'\nimport { ArcGenerator, Arc } from './types'\n\n/**\n * Memoize a d3 arc generator.\n *\n * Please note that both inner/outer radius aren't static\n * and should come from the arc itself, while it requires\n * more props on the arcs, it provides more flexibility\n * because it's not limited to pie then but can also work\n * with charts such as sunbursts.\n */\nexport const useArcGenerator = ({\n    cornerRadius = 0,\n    padAngle = 0,\n}: {\n    cornerRadius?: number\n    padAngle?: number\n} = {}): ArcGenerator =>\n    useMemo(\n        () =>\n            d3Arc<Arc>()\n                .innerRadius(arc => arc.innerRadius)\n                .outerRadius(arc => arc.outerRadius)\n                .cornerRadius(cornerRadius)\n                .padAngle(padAngle),\n        [cornerRadius, padAngle]\n    )\n"],"names":["staticStyle","pointerEvents","ArcLabel","label","style","theme","useTheme","_jsx","animated","g","transform","opacity","progress","text","textAnchor","dominantBaseline","labels","fill","textColor","getNormalizedAngle","angle","normalizedAngle","Math","PI","filterDataBySkipAngle","data","skipAngle","filter","datum","abs","radiansToDegrees","arc","endAngle","startAngle","svgEllipticalArcCommand","radius","largeArcFlag","sweepFlag","x","y","join","arcTransitionModes","arcTransitionModeById","enter","update","leave","middleAngle","innerRadius","outerRadius","centerRadius","pushIn","pushOut","useArcTransitionMode","mode","extraTransition","useMemo","transitionMode","computeArcCenter","offset","midAngle","positionFromAngle","interpolateArcCenter","startAngleValue","endAngleValue","innerRadiusValue","outerRadiusValue","to","centroid","useArcCentersTransition","extra","useMotionConfig","animate","springConfig","config","phases","transition","useTransition","keys","id","initial","from","immediate","interpolate","useArcCenters","computeExtraProps","map","position","ArcLabelsLayer","center","labelAccessor","radiusOffset","component","getLabel","usePropertyAccessor","getTextColor","useInheritedColor","filteredData","Label","transitionProps","createElement","key","drawCanvasArcLabels","ctx","textAlign","textBaseline","font","fontSize","fontFamily","forEach","fillStyle","fillText","useArcLabels","useCallback","ArcLabelComponent","ArcLinkLabel","_jsxs","path","stroke","linkColor","strokeWidth","thickness","d","textPosition","computeArcLinkTextAnchor","centerAngle","computeArcLink","diagonalLength","straightLength","side","point2","point0","point1","points","lineGenerator","line","interpolateLink","offsetValue","diagonalLengthValue","straightLengthValue","diagonalLengthAnimated","straightLengthAnimated","interpolateTextAnchor","interpolateTextPosition","textOffsetValue","textOffset","useArcLinkLabelsTransition","getLinkColor","useFilteredDataBySkipAngle","transitionPhases","useTransitionPhases","ArcLinkLabelsLayer","drawCanvasArcLinkLabels","textPropsByEngine","canvas","align","beginPath","strokeStyle","lineWidth","point","index","moveTo","lineTo","useArcLinks","links","link","useArcLinkLabels","ArcLinkLabelComponent","ArcLine","animatedProps","rest","start","end","originalStartAngle","originalEndAngle","min","max","degreesToRadians","mid","generateSvgArc","ArcShape","onClick","onMouseEnter","onMouseMove","onMouseLeave","handleClick","event","handleMouseEnter","handleMouseMove","handleMouseLeave","color","borderColor","borderWidth","undefined","interpolateArc","arcGenerator","useArcsTransition","ArcsLayer","getBorderColor","Arc","computeArcBoundingBox","centerX","centerY","includeCenter","p0","push","p1","round","p","xs","ys","x0","x1","y0","width","height","isCursorInRing","cursorX","cursorY","distance","getDistance","findArcUnderCursor","arcs","cursorAngle","getAngle","find","useAnimatedArc","datumWithArc","animatedValues","useSpring","useArcGenerator","cornerRadius","padAngle","d3Arc"],"mappings":"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"}